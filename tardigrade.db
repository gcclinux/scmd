{"id":1,"key":"$ go clean -modcache","data":"GO command to delete all downloaded go mod cache"}
{"id":2,"key":"$ go mod init github.com/gcclinux/tardigrade","data":"GO initialise the go mod file name and path"}
{"id":3,"key":"$ go mod tidy","data":"GO delete unused modules from a project"}
{"id":4,"key":"$ go get -u github.com/gcclinux/tardigrade","data":"GO download specific available mod from github"}
{"id":5,"key":"$ go test -coverprofile=coverage.out && go tool cover -html=coverage.out","data":"GO create and launch a test cover profile to show what has test enabled and what is missing"}
{"id":6,"key":"$ go build -o tardigrade-$(uname)-$(uname -m) *.go","data":"GO build and compile an executable name with type and architecture in GO"}
{"id":7,"key":"$ df -kl | awk '{COUNTER+=$3} END {print COUNTER}' | awk '{$1/=1024;printf %.2fMB\n,$1}'","data":"Calculate in MB total size of utilised disk space"}
{"id":8,"key":"$ sudo -u www-data php occ trashbin:cleanup --all-users","data":"Nextcloud command to clean all user deleted items"}
{"id":9,"key":"$ sudo -u www-data php occ maintenance:mode --on ","data":"Nextcloud enable maintenance mode"}
{"id":10,"key":"$ sudo -u www-data php occ maintenance:mode --off ","data":"Nextcloud disable maintenance mode"}
{"id":11,"key":"$ sudo -u www-data php occ files:scan --path=user/files/Photos [user_name]","data":"Nextcloud rescan or scan a particular folder for a specific user"}
{"id":12,"key":"PS> New-NetFirewallRule -DisplayName SAMBA -Direction Inbound -LocalPort 445 -Protocol","data":"PowerShell Disable Firewall Rule for  Port 445"}
{"id":13,"key":"PS> New-NetFirewallRule -DisplayName SAMBA -Direction Inbound -LocalPort 445 -Protocol","data":"PowerShell Enable Firewall Rule for Port 445"}
{"id":14,"key":"PS> taskkill /IM WhatsApp.exe /F","data":"PowerShell kill running task Example"}
{"id":15,"key":"PS> rem shutdown /s /t 10","data":"Powershell Shutdown Windows PC through command"}
{"id":16,"key":"PS> Get-PnpDevice -PresentOnly | Where-Object { $_.InstanceId -match '^USB'}","data":"PowerShell list all attached USB devices"}
{"id":17,"key":"PS> $Env:Path","data":"Powershell display current environment path"}
{"id":18,"key":"PS> $Env:Path +=';C:\\Users\\ricar\\gradle-7.3.3\\bin'","data":"Powershell add Gradle to exiting path example"}
{"id":19,"key":"PS> Restart-Computer","data":"Powershell reboot windows PC"}
{"id":20,"key":"PS> Get-WmiObject –class Win32_processor | ft NumberOfCores,NumberOfLogicalProcessors","data":"Powershell list Number of CPU cores and Processors"}
{"id":21,"key":"PS> winget install --id Git.Git -e --source winget","data":"Powershell install application via command line using winget"}
{"id":22,"key":"$ df -hT /","data":"Linux Display / root filesystem type"}
{"id":23,"key":"$ sudo sntp -sS time.apple.com","data":"Darwin install Alternative ntpdate for MacOS"}
{"id":24,"key":"$ sudo pacman -Syu --noconfirm","data":"EndevourOS - ArchLinux update command"}
{"id":25,"key":"% spctl --add `pwd`/scmd-Darwin-arm64","data":"Darwin disable can’t be opened because apple cannot check it for malicious software"}
{"id":26,"key":"$ go run *.go --web","data":"GO command to compile and to launch at the same time"}
{"id":27,"key":"$ go get -u","data":"Go command to update all required mods configured on the mod.go file"}
{"id":28,"key":"$ shutdown now","data":"Linux command to power-down the system emmidiately"}
{"id":29,"key":"$ echo \"$(id -un) ALL=(ALL) NOPASSWD: ALL\" | sudo tee -a $(echo /etc/sudoers.d/$(echo 10-$(id -un)-nopasswd))","data":"WARNING: Linux command that disables sudo prompting for password when executing"}
{"id":30,"key":"$ sudo pacman -Sy neofetch --noconfirm","data":"EndeavourOS arch Linux command to install a package called neofetch"}
{"id":31,"key":"$ flatpak install flathub io.atom.Atom","data":"Linux compatible with flatpak installing Atom IDE via command line"}
{"id":32,"key":"$ yay -S signal-desktop --noconfirm","data":"EndeavourOS archlinux yay command to install signal-desktop package with no confirmation"}
{"id":33,"key":"$ yes | sudo pacman -Sy nfs-utils","data":"EndeavourOS arch command to install NFS Server by passing yes without the prompt"}
{"id":34,"key":"$ sudo sed -i \"s/^UID_MIN.*1000/UID_MIN 500/g\" /etc/login.defs","data":"Linux command to reduce the minimum user ID from 1000 down to 500 being the lowest"}
{"id":35,"key":"$ sudo sed -i \"s/^GID_MIN.*1000/GID_MIN 20/g\" /etc/login.defs","data":"Linux command to reduce the minimum Group ID from 1000 down to 20 being the lowest"}
{"id":36,"key":"$ sudo groupadd -g 20 macbook","data":"Linux command to create a new group named Macbook and give a GID of 20"}
{"id":37,"key":"$ sudo useradd macbook -u 501 -g 20 -m -s /bin/bash","data":"Linux command to create a user called macbook with UID of 501 and add to Group GID 20 and setting bash as the shell"}
{"id":38,"key":"$ sudo systemctl restart nfs-server","data":"Linux command to restart a service in the case NFS Server"}
{"id":39,"key":"$ sudo systemctl enable rpc-statd.service","data":"Linux command to enable the rpc-statd.service so it starts automatic when system reboot"}
{"id":40,"key":"GUI: In File Explorer right-click on the This PC (or Computer) icon, then click Properties -> Advanced System Settings -> Environmental Variables.","data":"Windows 10 Permanent PATH editing through the GUI"}
{"id":41,"key":"$ sudo do-release-upgrade","data":"Ubuntu Linux command to upgrade the distribution to the next available level"}
{"id":42,"key":"$ sudo apt update && sudo apt upgrade -y","data":"Ubuntu or debian based system to update the catalog and then upgrade individual packages required."}
{"id":43,"key":"$ ffmpeg -acodec copy -vcodec h264 -i input_file_name.mkv output_file_name.h264.avi","data":"Linux using ffmpeg command to re-encode video format from mkv to h264 (mpg4) "}
{"id":44,"key":"$ streamer -q -c /dev/video0 -f rgb24 -r 3 -t 00:00:10 -o video.avi","data":"Linux command using streamer to capture webcam or usb-video device and save to local file."}
{"id":45,"key":"$ mencoder input_video_file.ogg -o new_output_video.avi -oac mp3lame -ovc lavc","data":"Linux command using mencoder to convert ogg video file to a avi format with mp3 sound format"}
{"id":46,"key":"$ ffmpeg -i inputfile.flv -f mp3 \"Bobby Yarsulik - MineCraft.mp3\"","data":"Linux using ffmpeg command to convert a flv format audio file to and mp3 format file"}
{"id":47,"key":"% /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"","data":"Darwin on MacOS to install Homebrew package manager that provides software and packages not available officially by Apple"}
{"id":48,"key":"$ flatpak update","data":"Linux compatible with flatpak update all installed packages"}
{"id":49,"key":"$ sudo git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt","data":"Install letsencrypt on any supported linux platform"}
{"id":50,"key":"$ sudo htpasswd -c /etc/apache2/git.passwd gituser_name","data":"Create http password for git repository by create a htpasswd file in apache2 "}
{"id":51,"key":"$ alias ghpush='git add . && git commit -m \"$(date)\" && git branch -M main && git push -u origin main'","data":"Linux alias for Git push commit with date and easy sync, take current time stamp as message"}
{"id":52,"key":"$ rsync -av --delete empty_folder/  /to_be_delete_folder/\t","data":"In Linux this is the quickest way to delete millions of files and folders in a singe command"}
{"id":53,"key":"$ sudo update-alternatives --config java","data":"Linux and a easy way to update alternative PATH for an executable binary"}
{"id":54,"key":"$ readlink -f /usr/bin/java","data":"Linux a easy way to display java or go or any other binary's real path by following link"}
{"id":55,"key":"$ java -Xmx4096M -Xms4096M -jar application.jar","data":"Start a compiled java application with 4GB of reserved memory."}
{"id":56,"key":"$ smbclient -U sambaguest -L 192.168.0.100","data":"Linux as specific user sambaguest list shares on specific IP address"}
{"id":57,"key":"$ sudo smbstatus","data":"On linux check and display samba server status and connection"}
{"id":58,"key":"$ sudo useradd -m samba && sudo smbpasswd -a samba","data":"Linux create a new samba user and immediately set a password for the new user also"}
{"id":59,"key":"$ sudo mount -t cifs -o username=samba,password=samba //192.168.0.3/SAMBA /samba","data":"Example how to mount a samba share from a windows PC onto a linux /samba folder with specific user & password"}
{"id":60,"key":"% sudo mount -o resvport,rw -t nfs host:/export/NFS /Users/user_name/nfs","data":"Darwin mounting specific NFS share onto local user folder called nfs (required UID & GID to be setup in host)"}
{"id":61,"key":"$ sudo flatpak override <package_name_here> --filesystem=<path_here>","data":"Override flatpak permission command to give access to specific  path for the App "}
{"id":62,"key":"$ flatpak install flathub com.github.tchx84.Flatseal","data":"Flatseal is a graphical utility to review and modify permissions from your Flatpak applications."}
{"id":63,"key":"$ speedometer -r eno1 -t eno1","data":"Linux command to monitor network speed receive (RX) and Transmit (TX) "}
{"id":64,"key":"$ bmon","data":"Linux terminal network transfer speed monitor receive (RX) and Transmit (TX) "}
{"id":65,"key":"$ sudo lshw -C network","data":"Linux terminal command to list all physical network devices details including vendor, serial, product,capacity, etc"}
{"id":66,"key":"$ ssh-keygen -t rsa","data":"Linux command to generate ssh public key for direct access to git servers or any other system that has the public key saved."}
{"id":67,"key":"func isNumber(in string) (result bool) {\r\n\tresult = true\r\n\t_, err := strconv.ParseInt(in, 10, 0)\r\n\tif err != nil {\r\n\t\treturn false\r\n\t}\r\n\treturn result\r\n}","data":"Golang is Number function to check if a string parsed is an integer"}
{"id":68,"key":"public static boolean isNumeric(String strNum) {\r\n    if (strNum == null) {\r\n        return false;\r\n    }\r\n    try {\r\n        double d = Double.parseDouble(strNum);\r\n    } catch (NumberFormatException nfe) {\r\n        return false;\r\n    }\r\n    return true;\r\n}","data":"Java isNumber class to check if a string parsed is an integer"}
{"id":69,"key":"func replaceLast(x, y, z string) (x2 string) {\r\n\ti := strings.LastIndex(x, y)\r\n\tif i == -1 {\r\n\t\treturn x\r\n\t}\r\n\treturn x[:i] + z + x[i+len(y):]\r\n}\r\n","data":"Golang replaceLast receives (string in, old string, new string) it replaces the last instance of the old string and return updated string"}
{"id":70,"key":"$ dnf check-update","data":"Fedora check which packages have available updates"}
{"id":71,"key":"$ dnf updateinfo","data":"Fedora check a summary of updates available"}
{"id":72,"key":"$ dnf updateinfo list","data":"Fedora check list of updates and which types they belong to"}
{"id":73,"key":"$ sudo dnf upgrade","data":"Fedora start updating system run the following command"}
{"id":74,"key":"$ sudo shutdown -r now","data":"Fedora perform a reboot immediately"}
{"id":75,"key":"func main() {\r\n    tpl := template.Must(template.New(\"mytemplate\").Parse(`\r\n        <pre><code>{{.Code}}</code></pre>\r\n    `))\r\n\r\n    data := struct {\r\n        Code string\r\n    }{\r\n        `func main() {\r\n            fmt.Println(\"Hello, World!\")\r\n        }`,\r\n    }\r\n\r\n    err := tpl.Execute(os.Stdout, data)\r\n    if err != nil {\r\n        panic(err)\r\n    }\r\n}","data":"Golang example code snippet that shows how to display formatted code in a Go HTML template"}
{"id":76,"key":"func main() {\r\n\ttmpl, err := template.New(\"example\").Parse(\"{{println \\\"Hello, World!\\\"}}\")\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error parsing template:\", err)\r\n\t\tos.Exit(1)\r\n\t}\r\n\tif err := tmpl.Execute(os.Stdout, nil); err != nil {\r\n\t\tfmt.Println(\"Error executing template:\", err)\r\n\t\tos.Exit(1)\r\n\t}\r\n}","data":"Golang show how to use the println function inside a Go template using the {{println}} action."}
{"id":77,"key":"public class Convert {\r\n//  convert string to int java\r\n   public static void main(String args[]) {\r\n       String str = \"111\";\r\n\r\n       int num1 = Integer.parseInt(str);\r\n       System.out.println(\"parseInt of the String = \"\r\n               + num1);\r\n\r\n       int num2 = Integer.parseInt(str, 2);//binary number\r\n       System.out.println(\"parseInt of the String with radix parameter = \" + num2);\r\n   }\r\n}","data":"Java class that converts a given string to an integer"}
{"id":78,"key":"$ flatpak info --show-permissions <package_name_here>","data":"Flatpak package show existing permission of a specific package"}
{"id":79,"key":"{{$odd := true}}\r\n    {{range $data := .AllData}}\r\n        {{if $odd}}\r\n            <I>{{ $data }}</I><BR>\r\n        {{else}}\r\n            <B>{{ $data }}</B>\r\n        {{end}}\r\n    {{$odd = not $odd}}\r\n{{end}}","data":"Golang template  odd or even loop that will format based current status"}
{"id":80,"key":"func main() {\r\n  myInt := 10\r\n  myString := strconv.Itoa(myInt)\r\n  fmt.Println(myString)\r\n}","data":"Golang convert integer to string "}
{"id":81,"key":"func main() {\r\n\tmyStr := \"320\"\r\n\ttest, err := strconv.ParseInt(myStr, 10, 0)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error during conversion\")\r\n\t\treturn\r\n\t}\r\n\tfmt.Println(test)\r\n}","data":"Golang convert string to integer using ParseInt"}
{"id":82,"key":"func main() {\r\n\tmyStr := \"320\"\r\n\ttest, err := strconv.Atoi(myStr)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error during conversion\")\r\n\t\treturn\r\n\t}\r\n\tfmt.Println(test)\r\n}","data":"Golang convert string to integer using Atoi"}
{"id":83,"key":"#include <stdio.h>\r\n#include <string.h>\r\nchar isNumber(char *text)\r\n{\r\n    int j;\r\n    j = strlen(text);\r\n    while(j--)\r\n    {\r\n        if(text[j] > 47 && text[j] < 58)\r\n            continue;\r\n        return 0;\r\n    }\r\n    return 1;\r\n}\r\nint main(){\r\n    char tmp[16];\r\n    scanf(\"%s\", tmp);\r\n\r\n    if(isNumber(tmp))\r\n        return printf(\"is a number\\n\");\r\n    return printf(\"is not a number\\n\");\r\n}","data":"C language isNumber function to check if a string parsed is an integer"}
{"id":84,"key":"$ gsettings set org.gnome.shell.extensions.dash-to-dock show-apps-at-top true","data":"How to move the \"Show Applications\" button in dock from right to left in Ubuntu Desktop"}
{"id":85,"key":"$ gsettings set org.gnome.shell.extensions.dash-to-dock show-apps-at-top false","data":"How to move the \"Show Applications\" button in dock from left to right in Ubuntu Desktop"}
{"id":86,"key":"$ sudo snap install whatsie","data":"Ubuntu install WhatSie - WhatsApp for Linux, simply use the following command"}
{"id":87,"key":"$ sudo snap install code --classic","data":"Ubuntu install Visual Studio Code (vscode) for Development using snap"}
{"id":88,"key":"$ sudo apt-get install fuse libfuse2 && sudo modprobe -v fuse && sudo addgroup fuse && sudo adduser $USER fuse","data":"Ubuntu and AppImages require a Linux technology called Filesystem in Userspace (or short FUSE) Install Fuse"}
{"id":89,"key":"$ sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf <go-version>.linux-amd64.tar.gz","data":"Linux install or update Go development language from source"}
{"id":90,"key":"$ alias sat='curl -s -L https://bit.ly/3uC4ke7 | bash' && source ~/.bashrc","data":"Linux with bash configure Small Admin Tool (SAT) for home users with administration tasks - Currently support Ubuntu, EndeavourOS, Fedora, Zorin, Termux "}
{"id":91,"key":"$ nmcli con show","data":"Linux view all the configured values (default and custom) for all interfaces"}
{"id":92,"key":"$ nmcli dev status","data":"Linux Now the status of all the connection network devices"}
{"id":93,"key":"$ systemctl status display-manager","data":"Linux show the current status as well as what is the running  display-manager "}
{"id":94,"key":"$ git config --global user.email \"you@example.com\"","data":"Git config settings up the global user.email address"}
{"id":95,"key":"$ git config --global user.name \"Your Name\"","data":"Git config settings up the global user.name globaly"}
{"id":96,"key":"$git config --global user.name ","data":"Git config get the global user name"}
{"id":97,"key":"$ git config --global user.email","data":"Git config get the global user email"}
{"id":98,"key":"$ lscpu","data":"Linux lscpu command allows you to list information about CPUs that are present in the system, including the number of CPUs, their architecture, vendor, family, model, CPU caches,"}
{"id":99,"key":"$ echo $(grep -c processor /proc/cpuinfo)","data":"Linux command to list number of CPU threads"}
{"id":100,"key":"$ nproc","data":"Linux show maximum user processes (nproc) limit on Linux counts the number of threads within all processes that can exist for a given user"}
{"id":101,"key":"$ sudo vcgencmd measure_temp","data":"Command line tool designed by Broadcom used on the RaspberryPi. This Python package is a native binding to that tool"}
{"id":102,"key":"$ echo CPU - $(top -b -n 1 |grep Cpu | awk '{print $2}')%","data":"Linux using \"top\" command to display current CPU load "}
{"id":103,"key":"$ apt install psensor","data":"psensor is a graphical hardware temperature monitor for Linux. It can monitor: the temperature of the motherboard and CPU sensors (using lm-sensors)"}
{"id":104,"key":"$ sudo apt -y install grafana && sudo systemctl enable --now grafana-server && sudo systemctl start grafana-server.service && systemctl status grafana-server.service","data":"Ubuntu process to install and enable Canonical Grafana (default port:3000, user:admin, pass:admin)"}
{"id":105,"key":"$ /usr/bin/screen -dmS SCMD <PATH>/scmd-Linux-aarch64 --web -port 3333 -service","data":"Linux using screen command to start application such as scmd in the background as a service "}
{"id":106,"key":"func main() {\r\n    num := 2\r\n    switch num {\r\n    case 1:\r\n        fmt.Println(\"The number is 1\")\r\n    case 2:\r\n        fmt.Println(\"The number is 2\")\r\n    case 3:\r\n        fmt.Println(\"The number is 3\")\r\n    default:\r\n        fmt.Println(\"The number is not 1, 2, or 3\")\r\n    }\r\n}","data":"Golang example of using the switch statement, In this example, we have a variable num with a value of 2. We then use the switch statement to check the value  the output will be:  The number is 2"}
{"id":107,"key":"<button onclick=\"downloadFile()\">Download file</button>\r\n\r\n<script>\r\nfunction downloadFile() {\r\n  var xhr = new XMLHttpRequest();\r\n  xhr.open('GET', 'http://example.com/file.txt', true);\r\n  xhr.responseType = 'blob';\r\n\r\n  xhr.onload = function() {\r\n    if (xhr.status === 200) {\r\n      var url = window.URL.createObjectURL(xhr.response);\r\n      var a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = 'file.txt';\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      setTimeout(function() {\r\n        document.body.removeChild(a);\r\n        window.URL.revokeObjectURL(url);  \r\n      }, 0);\r\n    }\r\n  };\r\n  xhr.send();\r\n}\r\n</script>","data":"HTML This code creates a button with an onclick event that triggers the downloadFile() function in JavaScript. The function creates an XMLHttpRequest object, sets its responseType to 'blob', and sends a GET request to the specified URL."}
{"id":108,"key":"package main\r\n\r\nimport (\r\n    \"fmt\"\r\n    \"io/ioutil\"\r\n    \"net/http\"\r\n    \"html/template\"\r\n)\r\n\r\nfunc handler(w http.ResponseWriter, r *http.Request) {\r\n    if r.Method == \"POST\" {\r\n        url := r.FormValue(\"url\")\r\n        resp, err := http.Get(url)\r\n        if err != nil {\r\n            fmt.Fprintf(w, \"Error: %v\", err)\r\n            return\r\n        }\r\n        defer resp.Body.Close()\r\n        body, err := ioutil.ReadAll(resp.Body)\r\n        if err != nil {\r\n            fmt.Fprintf(w, \"Error: %v\", err)\r\n            return\r\n        }\r\n        fmt.Fprintf(w, \"%s\", body)\r\n    } else {\r\n        tmpl, err := template.ParseFiles(\"template.html\")\r\n        if err != nil {\r\n            fmt.Fprintf(w, \"Error: %v\", err)\r\n            return\r\n        }\r\n        tmpl.Execute(w, nil)\r\n    }\r\n}\r\n\r\nfunc main() {\r\n    http.HandleFunc(\"/\", handler)\r\n    http.ListenAndServe(\":8080\", nil)\r\n}","data":"Golang create a basic web browser in Go, you can use the \"net/http\" and \"html/template\" packages that are included in the standard library"}
{"id":109,"key":"package main\r\n\r\nimport (\r\n    \"html/template\"\r\n    \"net/http\"\r\n)\r\n\r\nfunc main() {\r\n    http.HandleFunc(\"/\", homeHandler)\r\n    http.ListenAndServe(\":8080\", nil)\r\n}\r\n\r\nfunc homeHandler(w http.ResponseWriter, r *http.Request) {\r\n    // Parse the template file\r\n    tmpl, err := template.ParseFiles(\"template.html\")\r\n    if err != nil {\r\n        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n        return\r\n    }\r\n\r\n    // Execute the template and pass in data\r\n    data := struct {\r\n        Title string\r\n        Body  string\r\n    }{\r\n        Title: \"Welcome to my website!\",\r\n        Body:  \"Thanks for visiting!\",\r\n    }\r\n\r\n    err = tmpl.Execute(w, data)\r\n    if err != nil {\r\n        http.Error(w, err.Error(), http.StatusInternalServerError)\r\n        return\r\n    }\r\n}","data":"Golang web server with template a simple example to help starting"}
{"id":110,"key":"import java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\n\r\npublic class Main {\r\n  public static void main(String args[]) {\r\n    WebServer ws = new WebServer();\r\n    ws.start();\r\n  }\r\n}\r\n\r\nclass WebServer {\r\n  protected void start() {\r\n    ServerSocket s;\r\n    System.out.println(\"Webserver starting up on port 80\");\r\n    System.out.println(\"(press ctrl-c to exit)\");\r\n    try {\r\n      // create the main server socket\r\n      s = new ServerSocket(80);\r\n    } catch (Exception e) {\r\n      System.out.println(\"Error: \" + e);\r\n      return;\r\n    }\r\n\r\n    System.out.println(\"Waiting for connection\");\r\n    for (;;) {\r\n      try {\r\n        Socket remote = s.accept();\r\n        System.out.println(\"Connection, sending data.\");\r\n        BufferedReader in = new BufferedReader(new InputStreamReader(remote.getInputStream()));\r\n        PrintWriter out = new PrintWriter(remote.getOutputStream());\r\n\r\n        String str = \".\";\r\n        while (!str.equals(\"\"))\r\n          str = in.readLine();\r\n\r\n        out.println(\"HTTP/1.0 200 OK\");\r\n        out.println(\"Content-Type: text/html\");\r\n        out.println(\"Server: Bot\");\r\n        out.println(\"\");\r\n        out.println(\"<H1>Welcome to the Ultra Mini-WebServer</H2>\");\r\n        out.flush();\r\n        remote.close();\r\n      } catch (Exception e) {\r\n        System.out.println(\"Error: \" + e);\r\n      }\r\n    }\r\n  }\r\n}","data":"Java web server as simple example to help you started"}
{"id":111,"key":"$ go get -u github.com/gcclinux/scmd","data":"test"}
{"id":112,"key":"func WriteLogToFile(message string) {\r\n    file, err := os.OpenFile(\"log.txt\", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0644)\r\n    if err != nil {\r\n        log.Fatal(err)\r\n    }\r\n    defer file.Close()\r\n\r\n    logger := log.New(file, \"\", log.LstdFlags)\r\n    logger.Println(message)\r\n}","data":"Golang function to write log information or data to a local file."}
{"id":113,"key":"$ conda config --set auto_activate_base false","data":"If you'd prefer that conda's base environment not be activated on startup,    set the auto_activate_base parameter to false"}
{"id":114,"key":"sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get install raspberrypi-ui-mods rpi-chromium-mods","data":"Install GUI desktop on rapsberry PI, update apt, and then install the raspberrypi-ui-mods and rpi-chromium-mods packages by typing out the following commands"}
{"id":115,"key":"sudo raspi-config","data":"Raspberry Pi or raspbian configuration tool for all settings including wifi, display, network, ssh and GPU configuration."}
{"id":116,"key":"$ wget -qO- https://brightdata.com/static/earnapp/install.sh > /tmp/earnapp.sh && sudo bash /tmp/earnapp.sh","data":"Download, install and configure earnapp on any linux flavour via command line!"}
{"id":117,"key":"$ sudo iw wlan0 get power_save","data":"Debian check if power save is enabled, this will put network card to sleep"}
{"id":118,"key":"$ sudo iw wlan0 set power_save off","data":"Debian disable NIC or network card from power save or sleep"}
{"id":119,"key":"$ sudo grep psk= /etc/NetworkManager/system-connections/* | awk -F\"/\" '{print substr($0, index($0, $5))}' | sed 's/.nmconnection:psk=/ = /g'","data":"Display stored wifi connections in ubuntu linux"}
{"id":120,"key":"PS> winget install Vim -e --source winget","data":"Powershell install application via command line using winget"}
{"id":121,"key":"$ sudo systemctl disable earnapp","data":"Linux command to disable the earnapp.service app so it won't start automatic when system reboot"}
{"id":122,"key":"$ sudo systemctl daemon-reload","data":"Linux command to restart the systemctl daemon-reload on the Server"}
{"id":123,"key":"$ sudo systemctl reset-failed","data":"Linux command to reset failed services listed in systemctl"}
{"id":124,"key":"$ sudo update-alternatives --config php","data":"Linux command to set an alternative or a default version of a specific app in this case to choose php version"}
{"id":125,"key":"$ sudo apt purge openssh-server && sudo apt autoremove","data":"Debian and Ubuntu completely delete and remove a package application from command line"}
{"id":126,"key":"$ awk '/32 host/ { print f } {f=$2}' <<< \"$(</proc/net/fib_trie)\" | sort -u","data":"Linux command get local IP address through proc "}
{"id":127,"key":"$ awk '/32 host/ { print f } {f=$2}' /proc/net/fib_trie | sort -u","data":"Linux command get local IP address through proc"}
{"id":128,"key":"$ sudo powertop","data":"Linux To inspect and monitor the power usage statistics, run the following command"}
{"id":129,"key":"% sw_vers","data":"Darwin or MacOS command to show what version of the OS is installed"}
{"id":130,"key":"% cd / && sudo dscl . -create /Users/oink UserShell /bin/bash UniqueID 666 PrimaryGroupID 1000","data":"Darwin command to create a new user called oink with specific shell id and gorup"}
{"id":131,"key":"CMD> wlan profile YOUR_WIFI_NAME key=clear","data":"Windows command to show the wifi password under Key Content if you forgot what your password is. "}
{"id":132,"key":"$ sudo -u www-data php /server/www/n/updater/updater.phar","data":"Nextcloud update command using the command line updater and not occ "}
{"id":133,"key":"$ sudo nmcli dev wifi list","data":"How can I display the list of available wifi (Wi-Fi) networks via command line on Ubuntu or any other Linux"}
{"id":134,"key":"$ sudo snap install network-manager","data":"Ubuntu install network application manager via snap"}
{"id":135,"key":"$ sudo nmcli dev wifi connect \"network-ssid\" password \"network-password\"","data":"How-to connect to wifi (Wi-Fi) using nmcli a network application manager for Ubuntu or other Linux"}
{"id":136,"key":"$ sudo nmcli --ask dev wifi connect","data":"How-to connect to wifi (Wi-Fi) using nmcli a network application manager for Ubuntu or other Linux"}
{"id":137,"key":"$ sudo apt install network-manager","data":"Ubuntu install network application manager via apt"}
{"id":138,"key":"% sw_vers && echo \"Architecture: \\t\\t $(arch)\"","data":"Darwin or MacOS command to show OS version and architecture"}
{"id":139,"key":"% sysctl -n machdep.cpu.brand_string","data":"Darwin or MacOS command to show CPU model and type"}
{"id":140,"key":"% sw_vers && echo \"Architecture: \\t\\t $(arch)\" && echo \"CPUModel: \\t\\t $(sysctl -n machdep.cpu.brand_string)\"","data":"Darwin or MacOS command to show OS version and architecture & Model"}
{"id":141,"key":"$ sudo nmcli con show --active","data":"How-to show active wifi (Wi-Fi) connection using nmcli a network application manager for Ubuntu or other Linux"}
{"id":142,"key":"PS> $FormatEnumerationLimit = 200; Get-Module Microsoft.PowerShell.Utility | Format-List","data":"PowerShell List formatted views to expand hidden details in a query"}
{"id":143,"key":"$ autoexpect -f mount.win10 sudo mount -t cifs -o vers=3.0,username=user@outlook.com //192.168.1.100/SHARE /home/ubuntu/win10-share","data":"Linux command create expect file to automatically mount a windows filesystem, tested on ubuntu & fedora"}
{"id":144,"key":"$ sudo tar -C /usr/local -xzf go1.20.5.linux-amd64.tar.gz","data":"Linux quick example how-to install golang or go command from line"}
{"id":145,"key":"$ sudo -u www-data php /server/www/n/occ app:update --all","data":"Nextcloud update apps example using occ"}
{"id":146,"key":"$ sudo -u www-data php /server/www/n/occ app:enable richdocumentscode_arm64","data":"Nextcloud enable app that is already installed and updated"}
{"id":147,"key":"$ sudo -u www-data php /server/www/n/occ app:list","data":"Nextcloud list all available apps via command line using occ"}
{"id":148,"key":"cd '/var/lib/plexmediaserver/Library/Application Support/Plex Media Server'","data":"Ubuntu Preferences.xml location for plex server"}
{"id":149,"key":"$ PGPASSWORD=password pg_dump -h host_name -d db_name -U user_name -v -f host_name-db_name-file_name-`date '+%Y-%m-%d'`.sql","data":"Postgresql simple backup command using pb_dump or psql databases"}
{"id":150,"key":"$ df -h | awk '{print $6}' | egrep  \"/[a-z]\" > /backup/root-mounts-exclude && sudo rsync -avr --exclude-from='/backup/root-mounts-exclude' / /backup/root/","data":"In Linux this is the quickest way to backup root file system is by excluding all other mountpoints "}
{"id":151,"key":"PS> Get-PSDrive","data":"PowerShell drive is a data store location that you can access like a filesystem drive in PowerShell"}
{"id":152,"key":"PS> Copy-Item -Path \"SourcePath\" -Destination \"DestinationPath\" -Recurse -Force -Verbose","data":"PowerShell to Copy a Folder and contents – Overwrite Existing  with Verbose output."}
{"id":153,"key":"$ sudo -u www-data php occ config:system:set updater.release.channel --value=beta","data":"Nextcloud set update to beta or stable release"}
{"id":154,"key":"$ GIT_SSL_NO_VERIFY=true git clone https://github.com/gcclinux/tardigrade-mod.git","data":"Git clone skip certificate checking : server certificate verification failed. CAfile: none CRLfile: none"}
{"id":155,"key":"$ git config --global http.sslVerify \"false\"","data":"Git clone skip certificate checking : server certificate verification failed. CAfile: none CRLfile: none"}
{"id":156,"key":"$ openssl genrsa -des3 -out myCA.key 2048","data":"Using openssl generate the private key to become a local CA Password:localhost"}
{"id":157,"key":"$ openssl req -x509 -new -nodes -key myCA.key -sha256 -days 1825 -out myCA.pem","data":"Using openssl and the myCA.key password generate local ssl certificate TLS"}
{"id":158,"key":"$ sudo cp myCA.pem /usr/local/share/ca-certificates/myCA.crt","data":"Adding the Root Certificate to Linux renaming it from myCA.pem to myCA.crt"}
{"id":159,"key":"\r\n% sudo security add-trusted-cert -d -r trustRoot -k \"/Library/Keychains/System.keychain\" myCA.pem","data":"Adding the Root Certificate to MacOS - Darwin via cli"}
{"id":160,"key":"$ strings your_executable | grep \"GLIBC\"","data":"Find out what version of the GNU C Library (glibc) was used to compile a binary executable, you can use the strings command"}
{"id":161,"key":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nmain()\r\n{\r\n        char cYesNo = '\\0';\r\n        int iResp1 = 0;\r\n        int iResp2 = 0;\r\n        int iResp3 = 0;\r\n        int iResp4 = 0;\r\n        int iElapsedTime = 0;\r\n        int iCurrentTime = 0;\r\n        int iRandomNum = 0;\r\n        int iNow = 0;\r\n        int iWait = 0;\r\n        int i1 = 0;\r\n        int i2 = 0;\r\n        int i3 = 0;\r\n        int i4 = 0;\r\n        int iCounter = 0;\r\n\r\n        srand(time(NULL));\r\n\r\n        system (\"clear\");\r\n\r\n        printf(\"\\n\\nPlay a game of Concentration? ( y or n): \");\r\n        scanf(\"%c\", &cYesNo);\r\n\r\n        if (cYesNo == 'y' || cYesNo == 'Y' ) {\r\n                int iSelection = 0;\r\n\r\n                while ( iSelection != 5 ) {\r\n                                system (\"clear\");\r\n                                printf(\"\\n\");\r\n                                printf(\"1\\t Easy\\n\");\r\n                                printf(\"2\\t Medium\\n\");\r\n                                printf(\"3\\t Hard\\n\");\r\n                                printf(\"4\\t Extreme\\n\");\r\n                                printf(\"\\n\");\r\n                                printf(\"5\\t Quit\\n\");\r\n                                printf(\"\\n\");\r\n                                printf(\"Enter you level or quit (1-5): \");\r\n                                scanf(\"%d\", &iSelection);\r\n\r\n                        switch (iSelection) {\r\n\r\n                                case 1:{\r\n                                        i1 = rand() %100;\r\n                                        i2 = rand() %100;\r\n                                        i3 = rand() %100;\r\n\r\n                                        printf(\"\\nConcentrate on the next three numbers\\n\");\r\n                                        printf(\"\\n%d\\t%d\\t%d\\n\", i1, i2, i3);\r\n\r\n                                        iCurrentTime = time(NULL);\r\n\r\n                                        do {\r\n                                                iElapsedTime = time(NULL);\r\n                                        } while ( (iElapsedTime - iCurrentTime) < 3 );\r\n\r\n                                        system (\"clear\");\r\n\r\n                                        printf(\"\\nEnter each number separated with one space: \");\r\n                                        scanf(\"%d%d%d\", &iResp1, &iResp2, &iResp3);\r\n\r\n                                        if ( i1 == iResp1 && i2 == iResp2 && i3 == iResp3 ){\r\n                                                printf(\"\\nCongratulations!\\n\\n\");\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 3 );\r\n                                        }\r\n                                        else {\r\n                                                printf(\"\\nSorry, correct numbers were %d %d %d\\n\\n\", i1, i2, i3);\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 5 );\r\n                                        }\r\n                                }\r\n                                case 2:{\r\n                                        i1 = rand() %100;\r\n                                        i2 = rand() %100;\r\n                                        i3 = rand() %100;\r\n\r\n                                        printf(\"\\nConcentrate on the next three numbers\\n\");\r\n                                        printf(\"\\n%d\\t%d\\t%d\\n\", i1, i2, i3);\r\n\r\n                                        iCurrentTime = time(NULL);\r\n\r\n                                        do {\r\n                                                iElapsedTime = time(NULL);\r\n                                        } while ( (iElapsedTime - iCurrentTime) < 2 );\r\n\r\n                                        system (\"clear\");\r\n\r\n                                        printf(\"\\nEnter each number separated with one space: \");\r\n                                        scanf(\"%d%d%d\", &iResp1, &iResp2, &iResp3);\r\n\r\n                                        if ( i1 == iResp1 && i2 == iResp2 && i3 == iResp3 ){\r\n                                                printf(\"\\nCongratulations!\\n\\n\");\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 3 );\r\n                                        }\r\n                                        else {\r\n                                                printf(\"\\nSorry, correct numbers were %d %d %d\\n\\n\", i1, i2, i3);\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 5 );\r\n                                        }\r\n                                }\r\n                                case 3:{\r\n                                        i1 = rand() %100;\r\n                                        i2 = rand() %100;\r\n                                        i3 = rand() %100;\r\n                                        i4 = rand() %100;\r\n\r\n                                        printf(\"\\nConcentrate on the next four numbers\\n\");\r\n                                        printf(\"\\n%d\\t%d\\t%d\\t%d\\n\", i1, i2, i3, i4);\r\n\r\n                                        iCurrentTime = time(NULL);\r\n\r\n                                        do {\r\n                                                iElapsedTime = time(NULL);\r\n                                        } while ( (iElapsedTime - iCurrentTime) < 2 );\r\n\r\n                                        system (\"clear\");\r\n\r\n                                        printf(\"\\nEnter each number separated with one space: \");\r\n                                        scanf(\"%d%d%d%d\", &iResp1, &iResp2, &iResp3, &iResp4);\r\n\r\n                                        if ( i1 == iResp1 && i2 == iResp2 && i3 == iResp3 && i4 == iResp4 ){\r\n                                                printf(\"\\nCongratulations!\\n\\n\");\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 3 );\r\n                                        }\r\n                                        else {\r\n                                                printf(\"\\nSorry, correct numbers were %d %d %d %d\\n\\n\", i1, i2, i3, i4);\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 7 );\r\n                                        }\r\n                                }\r\n                                case 4:{\r\n                                        i1 = rand() %100;\r\n                                        i2 = rand() %100;\r\n                                        i3 = rand() %100;\r\n                                        i4 = rand() %100;\r\n\r\n                                        printf(\"\\nConcentrate on the next four numbers\\n\");\r\n                                        printf(\"\\n%d\\t%d\\t%d\\t%d\\n\", i1, i2, i3, i4);\r\n\r\n                                        iCurrentTime = time(NULL);\r\n\r\n                                        do {\r\n                                                iElapsedTime = time(NULL);\r\n                                        } while ( (iElapsedTime - iCurrentTime) < 1 );\r\n\r\n                                        system (\"clear\");\r\n\r\n                                        printf(\"\\nEnter each number separated with one space: \");\r\n                                        scanf(\"%d%d%d%d\", &iResp1, &iResp2, &iResp3, &iResp4);\r\n\r\n                                        if ( i1 == iResp1 && i2 == iResp2 && i3 == iResp3 && i4 == iResp4 ){\r\n                                                printf(\"\\nCongratulations!\\n\\n\");\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 3 );\r\n                                        }\r\n                                        else {\r\n                                                printf(\"\\nSorry, correct numbers were %d %d %d %d\\n\\n\", i1, i2, i3, i4);\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 7 );\r\n                                        }\r\n                                }\r\n                        }\r\n                }\r\n                system (\"clear\");\r\n                printf(\"\\n\");\r\n                printf(\"\\nThank you for playing concentration\\n\\n\");\r\n                printf(\"\\n\");\r\n        }\r\n}","data":"Simple c guess number game"}
{"id":162,"key":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nmain()\r\n{\r\n        char cYesNo = '\\0';\r\n        int iResp1 = 0;\r\n        int iResp2 = 0;\r\n        int iResp3 = 0;\r\n        int iResp4 = 0;\r\n        int iElapsedTime = 0;\r\n        int iCurrentTime = 0;\r\n        int iRandomNum = 0;\r\n        int iNow = 0;\r\n        int iWait = 0;\r\n        int i1 = 0;\r\n        int i2 = 0;\r\n        int i3 = 0;\r\n        int i4 = 0;\r\n        int iCounter = 0;\r\n\r\n        srand(time(NULL));\r\n\r\n        system (\"clear\");\r\n\r\n        printf(\"\\n\\nPlay a game of Concentration? ( y or n): \");\r\n        scanf(\"%c\", &cYesNo);\r\n\r\n        if (cYesNo == 'y' || cYesNo == 'Y' ) {\r\n                int iSelection = 0;\r\n\r\n                while ( iSelection != 5 ) {\r\n                                system (\"clear\");\r\n                                printf(\"\\n\");\r\n                                printf(\"1\\t Easy\\n\");\r\n                                printf(\"2\\t Medium\\n\");\r\n                                printf(\"3\\t Hard\\n\");\r\n                                printf(\"4\\t Extreme\\n\");\r\n                                printf(\"\\n\");\r\n                                printf(\"5\\t Quit\\n\");\r\n                                printf(\"\\n\");\r\n                                printf(\"Enter you level or quit (1-5): \");\r\n                                scanf(\"%d\", &iSelection);\r\n\r\n                        switch (iSelection) {\r\n\r\n                                case 1:{\r\n                                        i1 = rand() %100;\r\n                                        i2 = rand() %100;\r\n                                        i3 = rand() %100;\r\n\r\n                                        printf(\"\\nConcentrate on the next three numbers\\n\");\r\n                                        printf(\"\\n%d\\t%d\\t%d\\n\", i1, i2, i3);\r\n\r\n                                        iCurrentTime = time(NULL);\r\n\r\n                                        do {\r\n                                                iElapsedTime = time(NULL);\r\n                                        } while ( (iElapsedTime - iCurrentTime) < 3 );\r\n\r\n                                        system (\"clear\");\r\n\r\n                                        printf(\"\\nEnter each number separated with one space: \");\r\n                                        scanf(\"%d%d%d\", &iResp1, &iResp2, &iResp3);\r\n\r\n                                        if ( i1 == iResp1 && i2 == iResp2 && i3 == iResp3 ){\r\n                                                printf(\"\\nCongratulations!\\n\\n\");\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 3 );\r\n                                        }\r\n                                        else {\r\n                                                printf(\"\\nSorry, correct numbers were %d %d %d\\n\\n\", i1, i2, i3);\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 5 );\r\n                                        }\r\n                                }\r\n                                case 2:{\r\n                                        i1 = rand() %100;\r\n                                        i2 = rand() %100;\r\n                                        i3 = rand() %100;\r\n\r\n                                        printf(\"\\nConcentrate on the next three numbers\\n\");\r\n                                        printf(\"\\n%d\\t%d\\t%d\\n\", i1, i2, i3);\r\n\r\n                                        iCurrentTime = time(NULL);\r\n\r\n                                        do {\r\n                                                iElapsedTime = time(NULL);\r\n                                        } while ( (iElapsedTime - iCurrentTime) < 2 );\r\n\r\n                                        system (\"clear\");\r\n\r\n                                        printf(\"\\nEnter each number separated with one space: \");\r\n                                        scanf(\"%d%d%d\", &iResp1, &iResp2, &iResp3);\r\n\r\n                                        if ( i1 == iResp1 && i2 == iResp2 && i3 == iResp3 ){\r\n                                                printf(\"\\nCongratulations!\\n\\n\");\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 3 );\r\n                                        }\r\n                                        else {\r\n                                                printf(\"\\nSorry, correct numbers were %d %d %d\\n\\n\", i1, i2, i3);\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 5 );\r\n                                        }\r\n                                }\r\n                                case 3:{\r\n                                        i1 = rand() %100;\r\n                                        i2 = rand() %100;\r\n                                        i3 = rand() %100;\r\n                                        i4 = rand() %100;\r\n\r\n                                        printf(\"\\nConcentrate on the next four numbers\\n\");\r\n                                        printf(\"\\n%d\\t%d\\t%d\\t%d\\n\", i1, i2, i3, i4);\r\n\r\n                                        iCurrentTime = time(NULL);\r\n\r\n                                        do {\r\n                                                iElapsedTime = time(NULL);\r\n                                        } while ( (iElapsedTime - iCurrentTime) < 2 );\r\n\r\n                                        system (\"clear\");\r\n\r\n                                        printf(\"\\nEnter each number separated with one space: \");\r\n                                        scanf(\"%d%d%d%d\", &iResp1, &iResp2, &iResp3, &iResp4);\r\n\r\n                                        if ( i1 == iResp1 && i2 == iResp2 && i3 == iResp3 && i4 == iResp4 ){\r\n                                                printf(\"\\nCongratulations!\\n\\n\");\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 3 );\r\n                                        }\r\n                                        else {\r\n                                                printf(\"\\nSorry, correct numbers were %d %d %d %d\\n\\n\", i1, i2, i3, i4);\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 7 );\r\n                                        }\r\n                                }\r\n                                case 4:{\r\n                                        i1 = rand() %100;\r\n                                        i2 = rand() %100;\r\n                                        i3 = rand() %100;\r\n                                        i4 = rand() %100;\r\n\r\n                                        printf(\"\\nConcentrate on the next four numbers\\n\");\r\n                                        printf(\"\\n%d\\t%d\\t%d\\t%d\\n\", i1, i2, i3, i4);\r\n\r\n                                        iCurrentTime = time(NULL);\r\n\r\n                                        do {\r\n                                                iElapsedTime = time(NULL);\r\n                                        } while ( (iElapsedTime - iCurrentTime) < 1 );\r\n\r\n                                        system (\"clear\");\r\n\r\n                                        printf(\"\\nEnter each number separated with one space: \");\r\n                                        scanf(\"%d%d%d%d\", &iResp1, &iResp2, &iResp3, &iResp4);\r\n\r\n                                        if ( i1 == iResp1 && i2 == iResp2 && i3 == iResp3 && i4 == iResp4 ){\r\n                                                printf(\"\\nCongratulations!\\n\\n\");\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 3 );\r\n                                        }\r\n                                        else {\r\n                                                printf(\"\\nSorry, correct numbers were %d %d %d %d\\n\\n\", i1, i2, i3, i4);\r\n                                                iNow = time(NULL);\r\n                                                do {\r\n                                                        iWait = time(NULL);\r\n                                                } while ( (iWait - iNow) < 7 );\r\n                                        }\r\n                                }\r\n                        }\r\n                }\r\n                system (\"clear\");\r\n                printf(\"\\n\");\r\n                printf(\"\\nThank you for playing concentration\\n\\n\");\r\n                printf(\"\\n\");\r\n        }\r\n}","data":"Simple game writing in c language to guess the numbers"}
{"id":163,"key":"$ cat file.txt | awk {'first = $1; $1=\"\"; print $0'}|sed 's/^ //g' ","data":"Generic Linux awk command to show all columns after first column "}
{"id":164,"key":"&","data":"Generic Linux command Start a new process in the background"}
{"id":165,"key":"$ sed -i 's/$/pattern/g' file.txt","data":"Generic Linux command sed add pattern at the end of each line"}
{"id":166,"key":"$ alias","data":"Generic Linux command Create an alias •"}
{"id":167,"key":"$ apropos","data":"Generic Linux command Search Help manual pages (man -k)"}
{"id":168,"key":"$ apt","data":"Generic Linux command Search for and install software packages (Debian/Ubuntu)"}
{"id":169,"key":"$ apt-get","data":"Generic Linux command Search for and install software packages (Debian/Ubuntu)"}
{"id":170,"key":"$ aptitude","data":"Generic Linux command Search for and install software packages (Debian/Ubuntu)"}
{"id":171,"key":"$ aspell","data":"Generic Linux command Spell Checker"}
{"id":172,"key":"$ at","data":"Generic Linux command Schedule a command to run once at a particular time"}
{"id":173,"key":"$ awk","data":"Generic Linux command Find and Replace text, database sort/validate/index"}
{"id":174,"key":"$ basename","data":"Generic Linux command Strip directory and suffix from filenames"}
{"id":175,"key":"$ base32","data":"Generic Linux command Base32 encode/decode data and print to standard output"}
{"id":176,"key":"$ base64","data":"Generic Linux command Base64 encode/decode data and print to standard output"}
{"id":177,"key":"$ bash","data":"Generic Linux command GNU Bourne-Again SHell"}
{"id":178,"key":"$ bc","data":"Generic Linux command Arbitrary precision calculator language"}
{"id":179,"key":"$ bg","data":"Generic Linux command Send to background"}
{"id":180,"key":"$ bind","data":"Generic Linux command Set or display readline key and function bindings •"}
{"id":181,"key":"$ break","data":"Generic Linux command Exit from a loop •"}
{"id":182,"key":"$ builtin","data":"Generic Linux command Run a shell builtin"}
{"id":183,"key":"$ bzip2","data":"Generic Linux command Compress or decompress named file(s)"}
{"id":184,"key":"$ cal","data":"Generic Linux command Display a calendar"}
{"id":185,"key":"$ caller","data":"Generic Linux command Return the context of any active subroutine call •"}
{"id":186,"key":"$ case","data":"Generic Linux command Conditionally perform a command"}
{"id":187,"key":"$ cat","data":"Generic Linux command Concatenate and print (display) the content of files"}
{"id":188,"key":"$ cd","data":"Generic Linux command Change Directory"}
{"id":189,"key":"$ cfdisk","data":"Generic Linux command Partition table manipulator for Linux"}
{"id":190,"key":"$ chattr","data":"Generic Linux command Change file attributes on a Linux file system"}
{"id":191,"key":"$ chgrp","data":"Generic Linux command Change group ownership"}
{"id":192,"key":"$ chmod","data":"Generic Linux command Change access permissions"}
{"id":193,"key":"$ chown","data":"Generic Linux command Change file owner and group"}
{"id":194,"key":"$ chpasswd","data":"Generic Linux command Update passwords in batch mode"}
{"id":195,"key":"$ chroot","data":"Generic Linux command Run a command with a different root directory"}
{"id":196,"key":"$ chkconfig","data":"Generic Linux command System services (runlevel)"}
{"id":197,"key":"$ cksum","data":"Generic Linux command Print CRC checksum and byte counts"}
{"id":198,"key":"$ clear","data":"Generic Linux command Clear terminal screen"}
{"id":199,"key":"$ cmp","data":"Generic Linux command Compare two files"}
{"id":200,"key":"$ comm","data":"Generic Linux command Compare two sorted files line by line"}
{"id":201,"key":"$ command","data":"Generic Linux command Run a command - ignoring shell functions •"}
{"id":202,"key":"$ continue","data":"Generic Linux command Resume the next iteration of a loop •"}
{"id":203,"key":"$ cp","data":"Generic Linux command Copy one or more files to another location"}
{"id":204,"key":"$ cpio","data":"Generic Linux command Copy files to and from archives"}
{"id":205,"key":"$ cron","data":"Generic Linux command Daemon to execute scheduled commands"}
{"id":206,"key":"$ crontab","data":"Generic Linux command Schedule a command to run at a later time"}
{"id":207,"key":"$ csplit","data":"Generic Linux command Split a file into context-determined pieces"}
{"id":208,"key":"$ curl","data":"Generic Linux command Transfer data from or to a server"}
{"id":209,"key":"$ cut","data":"Generic Linux command Divide a file into several parts"}
{"id":210,"key":"$ date","data":"Generic Linux command Display or change the date & time"}
{"id":211,"key":"$ dc","data":"Generic Linux command Desk Calculator"}
{"id":212,"key":"$ dd","data":"Generic Linux command Data Duplicator - convert and copy a file, write disk headers, boot records"}
{"id":213,"key":"$ ddrescue","data":"Generic Linux command Data recovery tool"}
{"id":214,"key":"$ declare","data":"Generic Linux command Declare variables and give them attributes •"}
{"id":215,"key":"$ df","data":"Generic Linux command Display free disk space"}
{"id":216,"key":"$ diff","data":"Generic Linux command Display the differences between two files"}
{"id":217,"key":"$ diff3","data":"Generic Linux command Show differences among three files"}
{"id":218,"key":"$ dig","data":"Generic Linux command DNS lookup"}
{"id":219,"key":"$ dir","data":"Generic Linux command Briefly list directory contents"}
{"id":220,"key":"$ dircolors","data":"Generic Linux command Colour setup for 'ls'"}
{"id":221,"key":"$ dirname","data":"Generic Linux command Convert a full pathname to just a path"}
{"id":222,"key":"$ dirs","data":"Generic Linux command Display list of remembered directories"}
{"id":223,"key":"$ dos2unix","data":"Generic Linux command Windows/MAC to UNIX text file format converter"}
{"id":224,"key":"$ dmesg","data":"Generic Linux command Print kernel & driver messages"}
{"id":225,"key":"$ dpkg","data":"Generic Linux command Package manager (Debian/Ubuntu)."}
{"id":226,"key":"$ du","data":"Generic Linux command Estimate file space usage"}
{"id":227,"key":"$ echo","data":"Generic Linux command Display message on screen •"}
{"id":228,"key":"$ egrep","data":"Generic Linux command Search file(s) for lines that match an extended expression"}
{"id":229,"key":"$ eject","data":"Generic Linux command Eject removable media"}
{"id":230,"key":"$ enable","data":"Generic Linux command Enable and disable builtin shell commands •"}
{"id":231,"key":"$ env","data":"Generic Linux command Environment variables"}
{"id":232,"key":"$ ethtool","data":"Generic Linux command Ethernet card settings"}
{"id":233,"key":"$ eval","data":"Generic Linux command Evaluate several commands/arguments"}
{"id":234,"key":"$ exec","data":"Generic Linux command Execute a command"}
{"id":235,"key":"$ exit","data":"Generic Linux command Exit the shell"}
{"id":236,"key":"$ expand","data":"Generic Linux command Convert tabs to spaces"}
{"id":237,"key":"$ export","data":"Generic Linux command Set an environment variable"}
{"id":238,"key":"$ expr","data":"Generic Linux command Evaluate expressions"}
{"id":239,"key":"$ false","data":"Generic Linux command Do nothing, unsuccessfully"}
{"id":240,"key":"$ fdformat","data":"Generic Linux command Low-level format a floppy disk"}
{"id":241,"key":"$ fdisk","data":"Generic Linux command Partition table manipulator for Linux"}
{"id":242,"key":"$ fg","data":"Generic Linux command Send job to foreground"}
{"id":243,"key":"$ fgrep","data":"Generic Linux command Search file(s) for lines that match a fixed string"}
{"id":244,"key":"$ file","data":"Generic Linux command Determine file type"}
{"id":245,"key":"$ find","data":"Generic Linux command Search for files that meet a desired criteria"}
{"id":246,"key":"$ fmt","data":"Generic Linux command Reformat paragraph text"}
{"id":247,"key":"$ fold","data":"Generic Linux command Wrap text to fit a specified width"}
{"id":248,"key":"$ for","data":"Generic Linux command Expand words, and execute commands"}
{"id":249,"key":"$ format","data":"Generic Linux command Format disks or tapes"}
{"id":250,"key":"$ free","data":"Generic Linux command Display memory usage"}
{"id":251,"key":"$ fsck","data":"Generic Linux command File system consistency check and repair"}
{"id":252,"key":"$ ftp","data":"Generic Linux command File Transfer Protocol"}
{"id":253,"key":"$ function","data":"Generic Linux command Define Function Macros"}
{"id":254,"key":"$ fuser","data":"Generic Linux command Identify/kill the process that is accessing a file"}
{"id":255,"key":"$ gawk","data":"Generic Linux command Find and Replace text within file(s)"}
{"id":256,"key":"$ getopts","data":"Generic Linux command Parse positional parameters"}
{"id":257,"key":"$ getfacl","data":"Generic Linux command Get file access control lists"}
{"id":258,"key":"$ grep","data":"Generic Linux command Search file(s) for lines that match a given pattern"}
{"id":259,"key":"$ groupadd","data":"Generic Linux command Add a user security group"}
{"id":260,"key":"$ groupdel","data":"Generic Linux command Delete a group"}
{"id":261,"key":"$ groupmod","data":"Generic Linux command Modify a group"}
{"id":262,"key":"$ groups","data":"Generic Linux command Print group names a user is in"}
{"id":263,"key":"$ gzip","data":"Generic Linux command Compress or decompress named file(s)"}
{"id":264,"key":"$ hash","data":"Generic Linux command Remember the full pathname of a name argument"}
{"id":265,"key":"$ head","data":"Generic Linux command Output the first part of file(s)"}
{"id":266,"key":"$ help","data":"Generic Linux command Display help for a built-in command •"}
{"id":267,"key":"$ history","data":"Generic Linux command Command History"}
{"id":268,"key":"$ hostname","data":"Generic Linux command Print or set system name"}
{"id":269,"key":"$ htop","data":"Generic Linux command Interactive process viewer"}
{"id":270,"key":"$ iconv","data":"Generic Linux command Convert the character set of a file"}
{"id":271,"key":"$ id","data":"Generic Linux command Print user and group id's"}
{"id":272,"key":"$ if","data":"Generic Linux command Conditionally perform a command"}
{"id":273,"key":"$ ifconfig","data":"Generic Linux command Configure a network interface"}
{"id":274,"key":"$ ifdown","data":"Generic Linux command Stop a network interface"}
{"id":275,"key":"$ ifup","data":"Generic Linux command Start a network interface up"}
{"id":276,"key":"$ import","data":"Generic Linux command Capture an X server screen and save the image to file"}
{"id":277,"key":"$ install","data":"Generic Linux command Copy files and set attributes"}
{"id":278,"key":"$ iostat","data":"Generic Linux command Report CPU and i/o statistics"}
{"id":279,"key":"$ ip","data":"Generic Linux command Routing, devices and tunnels"}
{"id":280,"key":"$ jobs","data":"Generic Linux command List active jobs •"}
{"id":281,"key":"$ join","data":"Generic Linux command Join lines on a common field"}
{"id":282,"key":"$ kill","data":"Generic Linux command Kill a process by specifying its PID"}
{"id":283,"key":"$ killall","data":"Generic Linux command Kill processes by name"}
{"id":284,"key":"$ klist","data":"Generic Linux command List cached Kerberos tickets"}
{"id":285,"key":"$ less","data":"Generic Linux command Display output one screen at a time"}
{"id":286,"key":"$ let","data":"Generic Linux command Perform arithmetic on shell variables •"}
{"id":287,"key":"$ link","data":"Generic Linux command Create a link to a file"}
{"id":288,"key":"$ ln","data":"Generic Linux command Create a symbolic link to a file"}
{"id":289,"key":"$ local","data":"Generic Linux command Create a function variable •"}
{"id":290,"key":"$ locate","data":"Generic Linux command Find files"}
{"id":291,"key":"$ logname","data":"Generic Linux command Print current login name"}
{"id":292,"key":"$ logout","data":"Generic Linux command Exit a login shell •"}
{"id":293,"key":"$ look","data":"Generic Linux command Display lines beginning with a given string"}
{"id":294,"key":"$ lpc","data":"Generic Linux command Line printer control program"}
{"id":295,"key":"$ lpr","data":"Generic Linux command Print files"}
{"id":296,"key":"$ lprint","data":"Generic Linux command Print a file"}
{"id":297,"key":"$ lprintd","data":"Generic Linux command Delete a print job"}
{"id":298,"key":"$ lprintq","data":"Generic Linux command List the print queue"}
{"id":299,"key":"$ lprm","data":"Generic Linux command Remove jobs from the print queue"}
{"id":300,"key":"$ lsattr","data":"Generic Linux command List file attributes on a Linux second extended file system"}
{"id":301,"key":"$ lsblk","data":"Generic Linux command List block devices"}
{"id":302,"key":"$ ls","data":"Generic Linux command List information about file(s)"}
{"id":303,"key":"$ lsof","data":"Generic Linux command List open files"}
{"id":304,"key":"$ lspci","data":"Generic Linux command List all PCI devices"}
{"id":305,"key":"$ make","data":"Generic Linux command Recompile a group of programs"}
{"id":306,"key":"$ man","data":"Generic Linux command Help manual"}
{"id":307,"key":"$ mapfile","data":"Generic Linux command Read lines from standard input into an indexed array variable •"}
{"id":308,"key":"$ mkdir","data":"Generic Linux command Create new folder(s)"}
{"id":309,"key":"$ mkfifo","data":"Generic Linux command Make FIFOs (named pipes)"}
{"id":310,"key":"$ mkfile","data":"Generic Linux command Make a file"}
{"id":311,"key":"$ mkisofs","data":"Generic Linux command Create a hybrid ISO9660/JOLIET/HFS filesystem"}
{"id":312,"key":"$ mknod","data":"Generic Linux command Make block or character special files"}
{"id":313,"key":"$ mktemp","data":"Generic Linux command Make a temporary file"}
{"id":314,"key":"$ more","data":"Generic Linux command Display output one screen at a time"}
{"id":315,"key":"$ most","data":"Generic Linux command Browse or page through a text file"}
{"id":316,"key":"$ mount","data":"Generic Linux command Mount a file system"}
{"id":317,"key":"$ mtools","data":"Generic Linux command Manipulate MS-DOS files"}
{"id":318,"key":"$ mtr","data":"Generic Linux command Network diagnostics (traceroute/ping)"}
{"id":319,"key":"$ mv","data":"Generic Linux command Move or rename files or directories"}
{"id":320,"key":"$ mmv","data":"Generic Linux command Mass Move and rename (files)"}
{"id":321,"key":"$ nc","data":"Generic Linux command Netcat, read and write data across networks"}
{"id":322,"key":"$ netstat","data":"Generic Linux command Networking connections/stats"}
{"id":323,"key":"$ nft","data":"Generic Linux command nftables for packet filtering and classification"}
{"id":324,"key":"$ nice","data":"Generic Linux command Set the priority of a command or job"}
{"id":325,"key":"$ nl","data":"Generic Linux command Number lines and write files"}
{"id":326,"key":"$ nohup","data":"Generic Linux command Run a command immune to hangups"}
{"id":327,"key":"$ notify-send","data":"Generic Linux command Send desktop notifications"}
{"id":328,"key":"$ nslookup","data":"Generic Linux command Query Internet name servers interactively"}
{"id":329,"key":"$ open","data":"Generic Linux command Open a file in its default application"}
{"id":330,"key":"$ op","data":"Generic Linux command Operator access"}
{"id":331,"key":"$ passwd","data":"Generic Linux command Modify a user password"}
{"id":332,"key":"$ paste","data":"Generic Linux command Merge lines of files"}
{"id":333,"key":"$ pathchk","data":"Generic Linux command Check file name portability"}
{"id":334,"key":"$ Perf","data":"Generic Linux command Performance analysis tools for Linux"}
{"id":335,"key":"$ ping","data":"Generic Linux command Test a network connection"}
{"id":336,"key":"$ pgrep","data":"Generic Linux command List processes by name"}
{"id":337,"key":"$ pkill","data":"Generic Linux command Kill processes by name"}
{"id":338,"key":"$ popd","data":"Generic Linux command Restore the previous value of the current directory"}
{"id":339,"key":"$ pr","data":"Generic Linux command Prepare files for printing"}
{"id":340,"key":"$ printcap","data":"Generic Linux command Printer capability database"}
{"id":341,"key":"$ printenv","data":"Generic Linux command Print environment variables"}
{"id":342,"key":"$ printf","data":"Generic Linux command Format and print data •"}
{"id":343,"key":"$ ps","data":"Generic Linux command Process status"}
{"id":344,"key":"$ pushd","data":"Generic Linux command Save and then change the current directory"}
{"id":345,"key":"$ pv","data":"Generic Linux command Monitor the progress of data through a pipe"}
{"id":346,"key":"$ pwd","data":"Generic Linux command Print Working Directory"}
{"id":347,"key":"$ quota","data":"Generic Linux command Display disk usage and limits"}
{"id":348,"key":"$ quotacheck","data":"Generic Linux command Scan a file system for disk usage"}
{"id":349,"key":"$ ram","data":"Generic Linux command ram disk device"}
{"id":350,"key":"$ rar","data":"Generic Linux command Archive files with compression"}
{"id":351,"key":"$ rcp","data":"Generic Linux command Copy files between two machines"}
{"id":352,"key":"$ read","data":"Generic Linux command Read a line from standard input •"}
{"id":353,"key":"$ readarray","data":"Generic Linux command Read from stdin into an array variable •"}
{"id":354,"key":"$ readonly","data":"Generic Linux command Mark variables/functions as readonly"}
{"id":355,"key":"$ reboot","data":"Generic Linux command Reboot the system"}
{"id":356,"key":"$ rename","data":"Generic Linux command Rename files"}
{"id":357,"key":"$ renice","data":"Generic Linux command Alter priority of running processes"}
{"id":358,"key":"$ remsync","data":"Generic Linux command Synchronize remote files via email"}
{"id":359,"key":"$ return","data":"Generic Linux command Exit a shell function"}
{"id":360,"key":"$ rev","data":"Generic Linux command Reverse lines of a file"}
{"id":361,"key":"$ rm","data":"Generic Linux command Remove files"}
{"id":362,"key":"$ rmdir","data":"Generic Linux command Remove folder(s)"}
{"id":363,"key":"$ rsync","data":"Generic Linux command Remote file copy (Synchronize file trees)"}
{"id":364,"key":"$ screen","data":"Generic Linux command Multiplex terminal, run remote shells via ssh"}
{"id":365,"key":"$ scp","data":"Generic Linux command Secure copy (remote file copy)"}
{"id":366,"key":"$ sdiff","data":"Generic Linux command Merge two files interactively"}
{"id":367,"key":"$ sed","data":"Generic Linux command Stream Editor"}
{"id":368,"key":"$ select","data":"Generic Linux command Accept user choices via keyboard input"}
{"id":369,"key":"$ seq","data":"Generic Linux command Print numeric sequences"}
{"id":370,"key":"$ set","data":"Generic Linux command Manipulate shell variables and functions"}
{"id":371,"key":"$ setfacl","data":"Generic Linux command Set file access control lists."}
{"id":372,"key":"$ sftp","data":"Generic Linux command Secure File Transfer Program"}
{"id":373,"key":"$ sha256sum","data":"Generic Linux command Compute and check SHA256 (256-bit) checksums"}
{"id":374,"key":"$ shift","data":"Generic Linux command Shift positional parameters"}
{"id":375,"key":"$ shopt","data":"Generic Linux command Shell Options"}
{"id":376,"key":"$ shuf","data":"Generic Linux command Generate random permutations"}
{"id":377,"key":"$ shutdown","data":"Generic Linux command Shutdown or restart linux"}
{"id":378,"key":"$ sleep","data":"Generic Linux command Delay for a specified time"}
{"id":379,"key":"$ slocate","data":"Generic Linux command Find files"}
{"id":380,"key":"$ sort","data":"Generic Linux command Sort text files"}
{"id":381,"key":"$ source","data":"Generic Linux command Run commands from a file '.' •"}
{"id":382,"key":"$ split","data":"Generic Linux command Split a file into fixed-size pieces"}
{"id":383,"key":"$ ss","data":"Generic Linux command Socket Statistics"}
{"id":384,"key":"$ ssh","data":"Generic Linux command Secure Shell client (remote login program)"}
{"id":385,"key":"$ stat","data":"Generic Linux command Display file or file system status"}
{"id":386,"key":"$ strace","data":"Generic Linux command Trace system calls and signals"}
{"id":387,"key":"$ su","data":"Generic Linux command Substitute user identity"}
{"id":388,"key":"$ sudo","data":"Generic Linux command Execute a command as another user"}
{"id":389,"key":"$ sum","data":"Generic Linux command Print a checksum for a file"}
{"id":390,"key":"$ suspend","data":"Generic Linux command Suspend execution of this shell •"}
{"id":391,"key":"$ sync","data":"Generic Linux command Synchronize data on disk with memory"}
{"id":392,"key":"$ tail","data":"Generic Linux command Output the last part of a file"}
{"id":393,"key":"$ tar","data":"Generic Linux command Store, list or extract files in an archive"}
{"id":394,"key":"$ tee","data":"Generic Linux command Redirect output to multiple files"}
{"id":395,"key":"$ test","data":"Generic Linux command Evaluate a conditional expression"}
{"id":396,"key":"$ time","data":"Generic Linux command Measure Program running time"}
{"id":397,"key":"$ timeout","data":"Generic Linux command Run a command with a time limit"}
{"id":398,"key":"$ times","data":"Generic Linux command User and system times"}
{"id":399,"key":"$ tmux","data":"Generic Linux command Terminal multiplexer"}
{"id":400,"key":"$ touch","data":"Generic Linux command Change file timestamps"}
{"id":401,"key":"$ top","data":"Generic Linux command List processes running on the system"}
{"id":402,"key":"$ tput","data":"Generic Linux command Set terminal-dependent capabilities, color, position"}
{"id":403,"key":"$ traceroute","data":"Generic Linux command Trace Route to Host"}
{"id":404,"key":"$ trap","data":"Generic Linux command Execute a command when the shell receives a signal •"}
{"id":405,"key":"$ tr","data":"Generic Linux command Translate, squeeze, and/or delete characters"}
{"id":406,"key":"$ true","data":"Generic Linux command Do nothing, successfully"}
{"id":407,"key":"$ tsort","data":"Generic Linux command Topological sort"}
{"id":408,"key":"$ tty","data":"Generic Linux command Print filename of terminal on stdin"}
{"id":409,"key":"$ type","data":"Generic Linux command Describe a command •"}
{"id":410,"key":"$ ulimit","data":"Generic Linux command Limit user resources •"}
{"id":411,"key":"$ umask","data":"Generic Linux command Users file creation mask"}
{"id":412,"key":"$ umount","data":"Generic Linux command Unmount a device"}
{"id":413,"key":"$ unalias","data":"Generic Linux command Remove an alias •"}
{"id":414,"key":"$ uname","data":"Generic Linux command Print system information"}
{"id":415,"key":"$ unexpand","data":"Generic Linux command Convert spaces to tabs"}
{"id":416,"key":"$ uniq","data":"Generic Linux command Uniquify files"}
{"id":417,"key":"$ units","data":"Generic Linux command Convert units from one scale to another"}
{"id":418,"key":"$ unix2dos","data":"Generic Linux command UNIX to Windows or MAC text file format converter"}
{"id":419,"key":"$ unrar","data":"Generic Linux command Extract files from a rar archive"}
{"id":420,"key":"$ unset","data":"Generic Linux command Remove variable or function names"}
{"id":421,"key":"$ unshar","data":"Generic Linux command Unpack shell archive scripts"}
{"id":422,"key":"$ until","data":"Generic Linux command Execute commands (until error)"}
{"id":423,"key":"$ uptime","data":"Generic Linux command Show uptime"}
{"id":424,"key":"$ useradd","data":"Generic Linux command Create new user account"}
{"id":425,"key":"$ userdel","data":"Generic Linux command Delete a user account"}
{"id":426,"key":"$ usermod","data":"Generic Linux command Modify user account"}
{"id":427,"key":"$ users","data":"Generic Linux command List users currently logged in"}
{"id":428,"key":"$ uuencode","data":"Generic Linux command Encode a binary file"}
{"id":429,"key":"$ uudecode","data":"Generic Linux command Decode a file created by uuencode"}
{"id":430,"key":"-v","data":"Generic Linux command Verbosely list directory contents ('ls -l -b')"}
{"id":431,"key":"$ vdir","data":"Generic Linux command Verbosely list directory contents ('ls -l -b')"}
{"id":432,"key":"$ vi","data":"Generic Linux command Text Editor"}
{"id":433,"key":"$ vmstat","data":"Generic Linux command Report virtual memory statistics"}
{"id":434,"key":"$ w","data":"Generic Linux command Show who is logged on and what they are doing"}
{"id":435,"key":"$ wait","data":"Generic Linux command Wait for a process to complete •"}
{"id":436,"key":"$ watch","data":"Generic Linux command Execute/display a program periodically"}
{"id":437,"key":"$ wc","data":"Generic Linux command Print byte, word, and line counts"}
{"id":438,"key":"$ whereis","data":"Generic Linux command Search the user's , man pages and source files for a program"}
{"id":439,"key":"$ which","data":"Generic Linux command Search the user's  for a program file"}
{"id":440,"key":"$ while","data":"Generic Linux command Execute commands"}
{"id":441,"key":"$ who","data":"Generic Linux command Print all usernames currently logged in"}
{"id":442,"key":"$ whoami","data":"Generic Linux command Print the current user id and name ('id -un')"}
{"id":443,"key":"$ wget","data":"Generic Linux command Retrieve web pages or files via HTTP, HTTPS or FTP"}
{"id":444,"key":"$ write","data":"Generic Linux command Send a message to another user"}
{"id":445,"key":"$ xargs","data":"Generic Linux command Execute utility, passing constructed argument list(s)"}
{"id":446,"key":"$ xdg-open","data":"Generic Linux command Open a file or URL in the user's preferred application."}
{"id":447,"key":"$ xxd","data":"Generic Linux command Make a hexdump or do the reverse"}
{"id":448,"key":"$ xz","data":"Generic Linux command Compress or decompress .xz and .lzma files"}
{"id":449,"key":"$ yes","data":"Generic Linux command Print a string until interrupted"}
{"id":450,"key":"$ zip","data":"Generic Linux command Package and compress (archive) files"}
{"id":451,"key":"$ .","data":"Generic Linux command Run a command script in the current shell"}
{"id":452,"key":"!!","data":"Generic Linux command Run the last command again"}
{"id":453,"key":"###","data":"Generic Linux command Comment / Remark"}
{"id":454,"key":"$ go bug","data":"Go help start a bug report"}
{"id":455,"key":"$ go build ","data":"Go help compile packages and dependencies"}
{"id":456,"key":"$ go clean","data":"Go help remove object files and cached files"}
{"id":457,"key":"$ go doc","data":"Go help show documentation for package or symbol"}
{"id":458,"key":"$ go env","data":"Go help print Go environment information"}
{"id":459,"key":"$ go fix","data":"Go help update packages to use new APIs"}
{"id":460,"key":"$ go fmt","data":"Go help gofmt (reformat) package sources"}
{"id":461,"key":"$ go generate","data":"Go help generate Go files by processing source"}
{"id":462,"key":"$ go get","data":"Go help add dependencies to current module and install them"}
{"id":463,"key":"$ go install","data":"Go help compile and install packages and dependencies "}
{"id":464,"key":"$ go list","data":"Go help list packages or modules"}
{"id":465,"key":"$ go mod","data":"Go help module maintenance"}
{"id":466,"key":"$ go work ","data":"Go help workspace maintenance"}
{"id":467,"key":"$ go run ","data":"Go help compile and run Go program"}
{"id":468,"key":"$ go test","data":"Go help test packages"}
{"id":469,"key":"$ go tool","data":"Go help run specified go tool"}
{"id":470,"key":"$ go version","data":"Go help print Go version"}
{"id":471,"key":"$ go vet","data":"Go help report likely mistakes in packages"}
{"id":472,"key":"$ go help buildconstraint","data":"Go help build constraints"}
{"id":473,"key":"$ go help buildmode","data":"Go help build modes"}
{"id":474,"key":"$ go help c","data":"Go help calling between Go and C"}
{"id":475,"key":"$ go help cache","data":"Go help build and test caching"}
{"id":476,"key":"$ go help environment","data":"Go help environment variables"}
{"id":477,"key":"$ go help filetype","data":"Go help The go command examines the contents of a restricted set of files in each directory"}
{"id":478,"key":"$ go help go.mod","data":"Go help the go.mod file"}
{"id":479,"key":"$ go help gopath","data":"Go help GOPATH environment variable"}
{"id":480,"key":"$ go help gopath-get","data":"Go help legacy GOPATH go get"}
{"id":481,"key":"$ go help goproxy","data":"Go help support for module proxy protocol"}
{"id":482,"key":"$ go help importpath","data":"Go help for import path syntax"}
{"id":483,"key":"$ go help modules","data":"Go help modules, module versions, and more"}
{"id":484,"key":"$ go help module-get","data":"Go help module-aware go get"}
{"id":485,"key":"$ go help module-auth","data":"Go help module authentication using go.sum"}
{"id":486,"key":"$ go help packages","data":"Go help package lists and patterns"}
{"id":487,"key":"$ go help private","data":"Go help configuration for downloading non-public code"}
{"id":488,"key":"$ go help testflag","data":"Go help on testing flags options"}
{"id":489,"key":"$ go help testfunc","data":"Go help testing functions options"}
{"id":490,"key":"$ go help vcs","data":"Go help info on controlling version control with GOVCS"}
{"id":491,"key":"$ dpkg-query -W --showformat=format","data":"bash Basic Debian Query installed packages, format e.g. ${Package} ${Version} ${Installed-Size}"}
{"id":492,"key":"$ dpkg --get-selections > file","data":"bash Basic Debian Write package selections to file."}
{"id":493,"key":"$ dpkg --set-selections < file","data":"bash Basic Debian Set package selections from file."}
{"id":494,"key":"$ if [up][down] device","data":"bash Basic Debian Start, stop network interfaces according to the file above."}
{"id":495,"key":"$ ip","data":"bash Basic Debian Show and manipulatenetwork interfaces and routing, needs iproute2."}
{"id":496,"key":"$ ssh -X user@host","data":"bash Basic Debian Login at another machine."}
{"id":497,"key":"$ scp files user@host:path","data":"bash Basic Debian Copy files to other machine and vice versa."}
{"id":498,"key":"$ man page or man bash","data":"bash Read online help for every command and many configuration files."}
{"id":499,"key":"$ command [--help, -h]","data":"bash Basic Debian Brief help for most commands."}
{"id":500,"key":"$ ls /usr/share/ doc/package-name/","data":"bash Basic Debian Find all documentation here, optional file README.Debian contains specifics."}
{"id":501,"key":"> boot: expert","data":"bash Basic Debian E.g. to set up the network w/o DHCP or to adapt bootloader installation."}
{"id":502,"key":"$ dpkg-reconfigure package-name","data":"bash Basic Debian Reconfigure a package, e.g. keyboard-configuration (keyboard), locales (localization)."}
{"id":503,"key":"$ update-alternatives options","data":"bash Basic Debian Manage command alternatives."}
{"id":504,"key":"$ update-grub","data":"bash Basic Debian After changing /etc/default/grub."}
{"id":505,"key":"$ systemctl restart name.service","data":"bash Basic Debian Restart a service, system daemon."}
{"id":506,"key":"$ systemctl stop name.service","data":"bash Basic Debian Stop a service, system daemon."}
{"id":507,"key":"$ systemctl start name.service","data":"bash Basic Debian Start a service, system daemon."}
{"id":508,"key":"$ systemctl halt","data":"bash Basic Debian Halts system."}
{"id":509,"key":"$ systemctl reboot","data":"bash Basic Debian Reboots system."}
{"id":510,"key":"$ systemctl poweroff","data":"bash Basic Debian Shuts down system."}
{"id":511,"key":"$ systemctl suspend\t","data":"bash Basic Debian Suspends system."}
{"id":512,"key":"$ systemctl hibernate","data":"bash Basic Debian Hibernates system."}
{"id":513,"key":"$ ls /var/log/","data":"bash Basic Debian All log files are under this directory."}
{"id":514,"key":"$ ls /etc/default/","data":"bash Basic Debian Default values for many daemons and services."}
{"id":515,"key":"$ cat files","data":"bash Generic Linux Print files to screen."}
{"id":516,"key":"$ cp files dest","data":"bash Generic Linux Copy files and directories."}
{"id":517,"key":"$ echo string","data":"bash Generic Linux Echo / show string to screen."}
{"id":518,"key":"$ gzip, bzip2, xz [-d]\tfiles","data":"bash Generic Linux \tCompress, uncompress files."}
{"id":519,"key":"$ pager files","data":"bash Generic Linux Show contents of files."}
{"id":520,"key":"$ ls [files]","data":"bash Generic Linux List files."}
{"id":521,"key":"$ mkdir directory-names","data":"bash Generic Linux Create directories."}
{"id":522,"key":"$ mv file1 file2","data":"bash Generic Linux Move, rename files."}
{"id":523,"key":"$ rm files","data":"bash Generic Linux Remove & delete files."}
{"id":524,"key":"$ rmdir dirs","data":"bash Generic Linux Remove empty directories."}
{"id":525,"key":"$ tar [c][x][t][z][j][J] -f file.tar [files]","data":"bash Generic Linux Create (c), extract (x), list table of (t) archive file, z for .gz, j for .bz2, J for .xz."}
{"id":526,"key":"$ find directories expressions","data":"bash Generic Linux Find files like -name name or -size +1000, etc."}
{"id":527,"key":"$ grep search-string files","data":"bash Generic Linux Find search-string in files."}
{"id":528,"key":"$ ln -s file link","data":"bash Generic Linux Create a symbolic link to a file."}
{"id":529,"key":"$ ps [options]","data":"bash Generic Linux Show current processes."}
{"id":530,"key":"$ kill [-9] PID","data":"bash Generic Linux Send signal to process (e.g. terminate it). Use ps for PID."}
{"id":531,"key":"$ su - [username]","data":"bash Generic Linux Become another user, / change user e.g. root."}
{"id":532,"key":"$ sudo command","data":"bash Generic Linux Execute a command as root as normal user, see /etc/sudoers."}
{"id":533,"key":"$ command > file","data":"bash Generic Linux Overwrite file with output of command."}
{"id":534,"key":"$ command >> file","data":"bash Generic Linux Append output of command to file."}
{"id":535,"key":"$ cmd1 | cmd2","data":"bash Generic Linux Use output of command 1 as input of command 2."}
{"id":536,"key":"$ command < file","data":"bash Generic Linux Use file as input for command."}
{"id":537,"key":"$ apt update","data":"bash Basic Debian Update packages listings from package repositories as listed in /etc/apt/sources.list. Required whenever that file or the contents of the repositories change."}
{"id":538,"key":"$ apt search","data":"bash Basic Debian search-string\tSearch packages and descriptions for search-string."}
{"id":539,"key":"$ apt list -a","data":"bash Basic Debian package-name\tShow versions and archive areas of available packages."}
{"id":540,"key":"$ apt show -a","data":"bash Basic Debian package-name\tShow package information incl. description."}
{"id":541,"key":"$ apt install","data":"bash Basic Debian package-names\tInstall packages from repositories with all dependencies."}
{"id":542,"key":"$ apt upgrade","data":"bash Basic Debian Install newest versions of all packages currently installed."}
{"id":543,"key":"$ apt full-upgrade","data":"bash Basic Debian Like apt upgrade, but with advanced conflict resolution."}
{"id":544,"key":"$ apt remove","data":"bash Basic Debian package-names\tRemove packages."}
{"id":545,"key":"$ apt autoremove","data":"bash Basic Debian Remove packages that no other packages depend on."}
{"id":546,"key":"$ apt depends","data":"bash Basic Debian package-name\tList all packages needed by the one given."}
{"id":547,"key":"$ apt rdepends","data":"bash Basic Debian package-name\tList all packages that need the one given."}
{"id":548,"key":"$ apt-file update","data":"bash Basic Debian Update content listings from package repositories, see apt update."}
{"id":549,"key":"$ apt-file search","data":"bash Basic Debian file-name\tSearch packages for file."}
{"id":550,"key":"$ apt-file list","data":"bash Basic Debian package-name\tList contents of a package."}
{"id":551,"key":"$ aptitude","data":"bash Basic Debian Console interface to APT, needs aptitude."}
{"id":552,"key":"$ synaptic","data":"bash Basic Debian GUI interface to APT, needs synaptic."}
{"id":553,"key":"$ dpkg -l [names]","data":"bash Basic Debian List packages."}
{"id":554,"key":"$ dpkg -I pkg.deb","data":"bash Basic Debian Show package information."}
{"id":555,"key":"$ dpkg -c pkg.deb","data":"bash Basic Debian List contents of package file."}
{"id":556,"key":"$ dpkg -S filename","data":"bash Basic Debian Show which package a file belongs to."}
{"id":557,"key":"$ dpkg -i pkg.deb","data":"bash Basic Debian Install package files."}
{"id":558,"key":"$ dpkg -V [package-names]","data":"bash Basic Debian Audit check sums of installed packages."}
{"id":559,"key":"$ dpkg-divert [options] file","data":"bash Basic Debian Override a package’s version of a file."}
{"id":560,"key":"$ dpkg --compare-versions v1 gt v2","data":"bash Basic Debian Compare version numbers; view results with echo $?."}
{"id":561,"key":"$ compress","data":"bash compress is a Unix shell compression program based on the LZW compression algorithm. Compared to gzip's fastest setting, compress is slightly slower at compression, slightly faster at decompression, and has a significantly lower compression ratio"}
{"id":562,"key":"<html>","data":"html beginning and end of an HTML document."}
{"id":563,"key":"<head>","data":"html header information of the document."}
{"id":564,"key":"<title>","data":"html specifies the title of the page."}
{"id":565,"key":"<body>","data":"html body contains the main content."}
{"id":566,"key":"<h1> ","data":"html define headings of different sizes."}
{"id":567,"key":"<h2>","data":"html define headings of different sizes."}
{"id":568,"key":"<h3>","data":"html define headings of different sizes."}
{"id":569,"key":"<h4>","data":"html define headings of different sizes."}
{"id":570,"key":"<h5>","data":"html define headings of different sizes."}
{"id":571,"key":"<h6>","data":"html define headings of different sizes."}
{"id":572,"key":"<p>","data":"html tag defines a paragraph of text."}
{"id":573,"key":"<a>","data":"html creates a hyperlink."}
{"id":574,"key":"<img>","data":"html inserts an image into the page."}
{"id":575,"key":"<ul>","data":"html create an unordered list."}
{"id":576,"key":"<ol>","data":"html create an ordered list."}
{"id":577,"key":"<iframe>","data":"html embed another HTML document within your web page."}
{"id":578,"key":"<audio>","data":"html embed audio content on your web page."}
{"id":579,"key":"<video>","data":"html embed video content on your web page."}
{"id":580,"key":"<canvas>","data":"html create a canvas element that can be used to draw graphics and animations."}
{"id":581,"key":"<svg>","data":"html create scalable vector graphics that can be manipulated using CSS and JavaScript."}
{"id":582,"key":"<datalist>","data":"html provide a list of options for an input field."}
{"id":583,"key":"<meter>","data":"html display meter bar on your web page."}
{"id":584,"key":"<progress>","data":"html display a progress bar on your web page."}
{"id":585,"key":"<details>","data":"html create an expandable section on your web page."}
{"id":586,"key":"<summary>","data":"html create an expandable section on your web page."}
{"id":587,"key":"<figure>","data":"html associate a caption with an image or other media."}
{"id":588,"key":"<figcaption>","data":"html associate a caption with an image or other media."}
{"id":589,"key":"<dialog>","data":"html create a modal dialog box that can be used for displaying messages."}
{"id":590,"key":"<template>","data":"html define a block of HTML that can be cloned and inserted into the web page."}
{"id":591,"key":"$ blkid","data":"Bash Use the blkid command to see the UUID of all partitions"}
{"id":592,"key":"package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"unicode\"\r\n)\r\n\r\nfunc isUpperCase(str string) bool {\r\n\tfor _, char := range str {\r\n\t\tif !unicode.IsUpper(char) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\treturn true\r\n}\r\n\r\nfunc main() {\r\n\tinput := \"HELLO\"\r\n\tif isUpperCase(input) {\r\n\t\tfmt.Println(\"The input string is in uppercase.\")\r\n\t} else {\r\n\t\tfmt.Println(\"The input string is not in uppercase.\")\r\n\t}\r\n}","data":"Go (or Golang), you can check if a string is in uppercase by iterating through its characters and using the unicode package to perform the uppercase check"}
{"id":593,"key":"package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"unicode\"\r\n)\r\n\r\nfunc isLowerCase(str string) bool {\r\n\tfor _, char := range str {\r\n\t\tif !unicode.IsLower(char) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\treturn true\r\n}\r\n\r\nfunc main() {\r\n\tinput := \"hello\"\r\n\tif isLowerCase(input) {\r\n\t\tfmt.Println(\"The input string is in lowercase.\")\r\n\t} else {\r\n\t\tfmt.Println(\"The input string is not in lowercase.\")\r\n\t}\r\n}","data":"Go (or Golang) does not have a built-in IsLower function in its standard library. However, you can create your own function to check if a string contains only lowercase letters"}
{"id":594,"key":"package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"strings\"\r\n)\r\n\r\nfunc main() {\r\n\tinput := \"hello\"\r\n\tuppercaseString := strings.ToUpper(input)\r\n\tfmt.Println(\"Uppercase string:\", uppercaseString)\r\n}","data":"In Go (or Golang), you can convert a string to uppercase using the strings package, specifically the strings.ToUpper() function"}
{"id":595,"key":"package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"io\"\r\n\t\"net/http\"\r\n)\r\n\r\nconst URL = \"https://example.com\"\r\n\r\nfunc getURL(format, symbol string) {\r\n\r\n\t// Create an HTTP client\r\n\tclient := &http.Client{}\r\n\r\n\t// Create an HTTP request with custom headers\r\n\treq, err := http.NewRequest(\"GET\", URL, nil)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error creating request:\", err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Add custom headers to the request\r\n\treq.Header.Add(\"User-Agent\", \"getURL\")\r\n\treq.Header.Add(\"Custom-Header\", \"Custom-Value\")\r\n\r\n\t// Send the request\r\n\tresponse, err := client.Do(req)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error sending request:\", err)\r\n\t\treturn\r\n\t}\r\n\tdefer response.Body.Close()\r\n\r\n\t// Read the response body\r\n\tbody, err := io.ReadAll(response.Body)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error reading the response body:\", err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Print the content of the webpage\r\n\tfmt.Println(\"Webpage content:\")\r\n\tfmt.Println(string(body))\r\n\r\n}","data":"Go download the content of a webpage in Goland, you can use the net/http package to make an HTTP GET request and then read the response body"}
{"id":596,"key":"PS> rundll32.exe powrprof.dll,SetSuspendState Hibernate","data":"PowerShell Hibernate windows from command without saving work first"}
{"id":597,"key":"PS> rundll32.exe powrprof.dll,SetSuspendState Standby","data":"PowerShell Standby windows from command saving work first"}
{"id":598,"key":"PS> Start-Sleep -Seconds 7200; rundll32.exe powrprof.dll,SetSuspendState Standby","data":"PowerShell Standby windows after 2 hours"}
{"id":599,"key":"package main\r\n\r\nimport (\r\n\t\"database/sql\"\r\n\t\"fmt\"\r\n\t\"log\"\r\n\r\n\t_ \"github.com/lib/pq\"\r\n)\r\n\r\nfunc main() {\r\n\t// Replace these connection parameters with your own\r\n\tconnStr := \"user=username dbname=mydb sslmode=disable\"\r\n\tdb, err := sql.Open(\"postgres\", connStr)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tdefer db.Close()\r\n\r\n\t// Open doesn't open a connection. Ping checks if the database is reachable.\r\n\terr = db.Ping()\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tfmt.Println(\"Connected to the database\")\r\n\r\n\t// Inserting data into the \"users\" table\r\n\tinsertStatement := `\r\n\t\tINSERT INTO users (name, age, email)\r\n\t\tVALUES ($1, $2, $3)\r\n\t\tRETURNING id\r\n\t`\r\n\r\n\t// Sample data\r\n\tname := \"John Doe\"\r\n\tage := 30\r\n\temail := \"john.doe@example.com\"\r\n\r\n\t// Executing the SQL statement\r\n\tvar userID int\r\n\terr = db.QueryRow(insertStatement, name, age, email).Scan(&userID)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tfmt.Printf(\"Inserted row with ID %v\\n\", userID)\r\n}","data":"Below is a simple example of writing data into a PostgreSQL database using Go (Golang). Make sure you have the PostgreSQL driver installed. You can install it using"}
{"id":600,"key":"package main\r\n\r\nimport (\r\n    \"database/sql\"\r\n    \"fmt\"\r\n    \"log\"\r\n\r\n    _ \"github.com/lib/pq\"\r\n)\r\n\r\nfunc main() {\r\n    // Open a connection to the database\r\n    db, err := sql.Open(\"postgres\", \"user=postgres password=postgres dbname=mydb sslmode=disable\")\r\n    if err != nil {\r\n        log.Fatal(err)\r\n    }\r\n    defer db.Close()\r\n\r\n    // Insert data into the table\r\n    _, err = db.Exec(\"INSERT INTO mytable (column1, column2) VALUES ($1, $2)\", \"value1\", \"value2\")\r\n    if err != nil {\r\n        log.Fatal(err)\r\n    }\r\n\r\n    fmt.Println(\"Data inserted successfully!\")\r\n}","data":"simple example of how to write data into a PostgreSQL database using Golang:"}
{"id":601,"key":"package main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"fmt\"\r\n\t\"os\"\r\n)\r\n\r\n// Config represents the structure of your JSON configuration file\r\ntype Config struct {\r\n\tHost         []string `json:\"Host\"`\r\n\tPort         []string `json:\"Port\"`\r\n\tUser         []string `json:\"User\"`\r\n\tPass         []string `json:\"Pass\"`\r\n\tDB           []string `json:\"DB\"`\r\n}\r\n\r\nfunc main() {\r\n\t// Read the JSON file\r\n\tfilePath := \"path/to/your/config.json\"\r\n\tdata, err := os.ReadFile(filePath)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error reading JSON file:\", err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Unmarshal JSON data into Config struct\r\n\tvar config Config\r\n\terr = json.Unmarshal(data, &config)\r\n\tif err != nil {\r\n\t\tfmt.Println(\"Error unmarshalling JSON:\", err)\r\n\t\treturn\r\n\t}\r\n\r\n\t// Access the first element of each configuration array\r\n\tfmt.Println(\"Host:\", config.Host[0])\r\n\tfmt.Println(\"Port:\", config.Port[0])\r\n\tfmt.Println(\"User:\", config.User[0])\r\n\tfmt.Println(\"Pass:\", config.Pass[0])\r\n\tfmt.Println(\"DB:\", config.DB[0])\r\n}","data":"Read a JSON configuration file in Go (Golang), you can use the encoding/json package to unmarshal the JSON data into a corresponding Go struct. Here's an example code snippet for reading the JSON configuration file you provided"}
{"id":602,"key":"import java.io.FileReader;\r\nimport java.io.IOException;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport org.json.simple.parser.JSONParser;\r\nimport org.json.simple.parser.ParseException;\r\n\r\npublic class ReadJSONFile {\r\n    public static void main(String[] args) {\r\n        JSONParser parser = new JSONParser();\r\n\r\n        try {\r\n            Object obj = parser.parse(new FileReader(\"path/to/json/file.json\"));\r\n\r\n            JSONArray jsonArray = (JSONArray) obj;\r\n\r\n            for (Object o : jsonArray) {\r\n                JSONObject jsonObject = (JSONObject) o;\r\n\r\n                String name = (String) jsonObject.get(\"name\");\r\n                String city = (String) jsonObject.get(\"city\");\r\n                String job = (String) jsonObject.get(\"job\");\r\n\r\n                JSONArray cars = (JSONArray) jsonObject.get(\"cars\");\r\n\r\n                System.out.println(\"Name: \" + name);\r\n                System.out.println(\"City: \" + city);\r\n                System.out.println(\"Job: \" + job);\r\n                System.out.println(\"Cars: \" + cars);\r\n            }\r\n        } catch (IOException | ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}","data":"example of how to read a JSON file into Java using the json-simple library"}
{"id":603,"key":"<html>\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Chart.js Example</title>\r\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n</head>\r\n<body>\r\n    <canvas id=\"myChart\"></canvas>\r\n    <script>\r\n        var url = \"http://localhost:8080/json\";\r\n        var labels = [];\r\n        var tempData = [];\r\n        var windData = [];\r\n\r\n        fetch(url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                for (var i = 0; i < data.length; i++) {\r\n                    labels.push(data[i].Obstimelocal);\r\n                    tempData.push(data[i].Temp);\r\n                    windData.push(data[i].Windspeed);\r\n                }\r\n\r\n                var ctx = document.getElementById('myChart').getContext('2d');\r\n                var myChart = new Chart(ctx, {\r\n                    type: 'line',\r\n                    data: {\r\n                        labels: labels,\r\n                        datasets: [{\r\n                            label: 'Temperature',\r\n                            data: tempData,\r\n                            borderColor: 'rgba(255, 99, 132, 1)',\r\n                            backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                            fill: false\r\n                        }, {\r\n                            label: 'Wind Speed',\r\n                            data: windData,\r\n                            borderColor: 'rgba(54, 162, 235, 1)',\r\n                            backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n                            fill: false\r\n                        }]\r\n                    },\r\n                    options: {\r\n                        scales: {\r\n                            yAxes: [{\r\n                                ticks: {\r\n                                    beginAtZero: true\r\n                                }\r\n                            }]\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n    </script>\r\n</body>\r\n</html>","data":"Simple example creating a chart using Chart.js, JavaScript with data provided by a JSON API"}
{"id":604,"key":"import (\r\n    \"fmt\"\r\n    \"log\"\r\n    \"os\"\r\n    \"path/filepath\"\r\n)\r\n\r\nfunc main() {\r\n    dir, err := filepath.Abs(filepath.Dir(os.Args[0]))\r\n    if err != nil {\r\n            log.Fatal(err)\r\n    }\r\n    fmt.Println(dir)\r\n}","data":"How to get the directory of the currently running (executable) file in Golang?"}
{"id":605,"key":"#!/usr/bin/python3\r\n# Import the Psycopg2 module\r\nimport psycopg2\r\n\r\n# Connect to the PostgreSQL database server\r\nconnection = psycopg2.connect(user=\"postgres\", password=\"password\", host=\"localhost\", port=\"5432\", database=\"test_db\")\r\n\r\n# Create a cursor object to execute SQL commands\r\ncursor = connection.cursor()\r\n\r\n# Define a SQL query to create a table\r\ncreate_table_query = '''CREATE TABLE users (\r\n    id SERIAL PRIMARY KEY,\r\n    name VARCHAR(50) NOT NULL,\r\n    email VARCHAR(50) UNIQUE NOT NULL\r\n);'''\r\n\r\n# Execute the query and commit the changes\r\ncursor.execute(create_table_query)\r\nconnection.commit()\r\nprint(\"Table created successfully\")\r\n\r\n# Define a SQL query to insert data into the table\r\ninsert_data_query = '''INSERT INTO users (name, email) VALUES (%s, %s);'''\r\n\r\n# Define the data to be inserted\r\ndata = [\r\n    (\"Alice\", \"alice@example.com\"),\r\n    (\"Bob\", \"bob@example.com\"),\r\n    (\"Charlie\", \"charlie@example.com\")\r\n]\r\n\r\n# Execute the query for each data item and commit the changes\r\nfor item in data:\r\n    cursor.execute(insert_data_query, item)\r\nconnection.commit()\r\nprint(\"Data inserted successfully\")\r\n\r\n# Close the cursor and the connection\r\ncursor.close()\r\nconnection.close()","data":"python3 example store data in postgresql database"}
{"id":606,"key":"import schedule\r\nimport time\r\nimport subprocess\r\n\r\ndef job():\r\n    print(\"Running main.py...\")\r\n    subprocess.run([\"python\", \"main.py\"])\r\n\r\n# Run the job immediately when the script starts\r\njob()\r\n\r\n# Schedule the job to run every 2 minutes\r\nschedule.every(2).minutes.do(job)\r\n\r\nwhile True:\r\n    schedule.run_pending()\r\n    time.sleep(1)\r\n","data":"python run a job every 2 minutes, the content of the job is stored in the main.py file "}
{"id":607,"key":"$ sudo setcap CAP_NET_BIND_SERVICE=+eip /server/weerbericht/weerbericht-Linux-aarch64.exe","data":"Example on how to allow port(s) bellow 1000 bind by normal user, in this case adding exception for weerbericht to port 443"}
{"id":608,"key":"using System;\r\n\r\nnamespace PrimeChecker\r\n{\r\n    class Program\r\n    {\r\n        // A simple function to check if a number is prime\r\n        public static bool IsPrime(int num)\r\n        {\r\n            if (num <= 1) return false; // Not prime if less than or equal to 1\r\n            if (num == 2) return true; // 2 is prime\r\n            for(int i = 2; i*i <= num; i++) // Start checking from 2\r\n                if (num % i == 0) return false; // Not prime if divisible by any i\r\n            return true; // Return true if it is prime\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Enter a number to check if it is prime:\");\r\n            int number = int.Parse(Console.ReadLine()); // Read a number from the user\r\n            if (IsPrime(number)) // Call the function to check if it is prime\r\n                Console.WriteLine(number + \" is a prime number.\");\r\n            else\r\n                Console.WriteLine(number + \" is not a prime number.\");\r\n        }\r\n    }\r\n}\r\n","data":"c# program to check if a number is prime"}
{"id":609,"key":"import java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\n\r\npublic class FileCreator {\r\n\r\n   public static void createDateFile(String path) {\r\n       Path filePath = Paths.get(path, \"date.txt\");\r\n\r\n       try {\r\n           // Create directories if they don't exist\r\n           Files.createDirectories(filePath.getParent());\r\n\r\n           // Get the current date in a formatted string\r\n           String formattedDate = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));\r\n\r\n           // Write the date to the file\r\n           Files.writeString(filePath, formattedDate);\r\n\r\n           System.out.println(\"File created successfully at: \" + filePath);\r\n\r\n       } catch (IOException e) {\r\n           System.err.println(\"Error creating file: \" + e.getMessage());\r\n       }\r\n   }\r\n\r\n   public static void main(String[] args) {\r\n       String path = \"/path/to/desired/directory\";  // Replace with your desired path\r\n       createDateFile(path);\r\n   }\r\n}","data":"Java function that takes a path as an input and creates a file called \"date.txt\" storing the current system date."}
{"id":610,"key":"// Function to initialize Chart.js\r\nfunction initializeCharts() {\r\n    var url = \"/1\";\r\n    var labels = [];\r\n    var tempData = [];\r\n    var humData = [];\r\n    var co2Data = [];\r\n    var pm10Data = [];\r\n    var pm25Data = [];\r\n\r\n    fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            for (var i = 0; i < data.length; i++) {\r\n                labels.push(data[i].Created);\r\n                tempData.push(data[i].Ch7_temp_v);\r\n                humData.push(data[i].Ch7_hum_v);\r\n                co2Data.push(data[i].CO2_c_v);\r\n                pm10Data.push(data[i].PM10_r_v);\r\n                pm25Data.push(data[i].PM25_r_v);\r\n            }\r\n\r\n            // Clear existing charts\r\n            clearCharts();\r\n\r\n            // Create new charts\r\n            createChart('mainChart', 'Temperature ℃', tempData, 'rgba(255, 99, 132, 1)', 'rgba(0, 204, 0, 0.2)');\r\n            createChart('humChart', 'Humidity (%)', humData, 'rgba(54, 162, 235, 1)', 'rgba(54, 162, 235, 0.2)');\r\n            createChart('co2Chart', 'Co2 (ppm)', co2Data, 'rgba(69, 245, 39, 0.8)', 'rgba(54, 162, 235, 0.2)');\r\n            createChart('pm10Chart', 'PM10 µg/m³', pm10Data, 'rgba(255, 99, 132, 1)', 'rgba(71, 57, 64, 0.34)');\r\n            createChart('pm25Chart', 'PM25 µg/m³', pm25Data, 'rgba(255, 99, 132, 1)', 'rgba(24, 68, 21, 0.34)');\r\n        });\r\n}\r\n\r\n// Function to create a single Chart.js chart\r\nfunction createChart(canvasId, label, data, borderColor, backgroundColor) {\r\n    var ctx = document.getElementById(canvasId).getContext('2d');\r\n    new Chart(ctx, {\r\n        type: 'line',\r\n        data: {\r\n            labels: labels,\r\n            datasets: [{\r\n                label: label,\r\n                borderWidth: 1,\r\n                data: data,\r\n                borderColor: borderColor,\r\n                backgroundColor: backgroundColor,\r\n                fill: true,\r\n                tension: 0.1,\r\n                pointRadius: 0\r\n            }]\r\n        },\r\n        options: {\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: false\r\n                    }\r\n                }]\r\n            },\r\n            elements: {\r\n                line: {\r\n                    borderWidth: 1\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n// Function to clear existing Chart.js instances\r\nfunction clearCharts() {\r\n    Chart.helpers.each(Chart.instances, function(instance){\r\n        instance.destroy();\r\n    });\r\n}\r\n\r\n// Call the initializeCharts function on page load\r\ninitializeCharts();\r\n\r\n// Optionally, clear charts when the page is about to be unloaded\r\nwindow.addEventListener('beforeunload', function () {\r\n    clearCharts();\r\n});\r\n","data":"If you want to destroy and rebuild Chart.js charts on the reload of the page, you can follow these steps:  Wrap your Chart.js initialization code in a function to make it reusable. Call this function when the page loads. Optionally, use the beforeunload event to clear the chart instances before the page is unloaded."}
{"id":611,"key":"package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\n// Function to convert km/h to m/s\r\nfunc kmhToMs(kmh float64) float64 {\r\n\t// Divide by 3.6\r\n\tms := kmh / 3.6\r\n\treturn ms\r\n}\r\n\r\nfunc main() {\r\n\t// Get the input value\r\n\t// You can modify this value or get it from a sensor\r\n\tkmh := 1.8 // Wind speed in km/h\r\n\t// Call the conversion function and print the result\r\n\tms := kmhToMs(kmh)\r\n\tfmt.Printf(\"The wind speed is %.2f m/s\\n\", ms)\r\n}\r\n","data":"To convert wind speed from kilometers per hour (km/h) to meters per second (m/s), you need to divide the value by 3.6. This is because 1 km/h is equal to 0.27778 m/s, or 1/3.6 m/s. You can find more information about this conversion here."}
{"id":612,"key":"package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"math\"\r\n)\r\n\r\n// Function to calculate the heat index\r\nfunc heatIndex(t float64, rh float64) float64 {\r\n\t// Convert temperature to Fahrenheit\r\n\ttf := t*9/5 + 32\r\n\t// Apply the formula\r\n\thi := -42.379 + 2.04901523*tf + 10.14333127*rh - 0.22475541*tf*rh - 0.00683783*tf*tf - 0.05481717*rh*rh + 0.00122874*tf*tf*rh + 0.00085282*tf*rh*rh - 0.00000199*tf*tf*rh*rh\r\n\t// Convert back to Celsius\r\n\thic := (hi - 32) * 5 / 9\r\n\treturn hic\r\n}\r\n\r\n// Function to calculate the wind chill\r\nfunc windChill(t float64, v float64) float64 {\r\n\t// Convert temperature to Fahrenheit\r\n\ttf := t*9/5 + 32\r\n\t// Convert wind speed to miles per hour\r\n\tvmph := v * 2.23694\r\n\t// Apply the formula\r\n\twc := 35.74 + 0.6215*tf - 35.75*math.Pow(vmph, 0.16) + 0.4275*tf*math.Pow(vmph, 0.16)\r\n\t// Convert back to Celsius\r\n\twcc := (wc - 32) * 5 / 9\r\n\treturn wcc\r\n}\r\n\r\n// Function to calculate the feelslike temperature\r\nfunc feelsLike(t float64, rh float64, v float64) float64 {\r\n\t// Check the conditions and call the appropriate function\r\n\tif t >= 27 && rh >= 40 {\r\n\t\t// Use heat index for high temperature and humidity\r\n\t\treturn heatIndex(t, rh)\r\n\t} else if t <= 10 && v >= 4.8 {\r\n\t\t// Use wind chill for low temperature and wind speed\r\n\t\treturn windChill(t, v)\r\n\t} else {\r\n\t\t// Use the actual temperature otherwise\r\n\t\treturn t\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\t// Get the input values\r\n\t// You can modify these values or get them from a sensor\r\n\tt := 15.0   // Temperature in Celsius\r\n\trh := 50.0  // Relative humidity in percentage\r\n\tv := 10.0   // Wind speed in meters per second\r\n\t// Call the feelslike function and print the result\r\n\tfl := feelsLike(t, rh, v)\r\n\tfmt.Printf(\"The feelslike temperature is %.2f°C\\n\", fl)\r\n}","data":"How to calculate FeelsLike temperature in Golang by providing Temperature , Humidity and WindSpeed"}
{"id":613,"key":"package handlers\r\n\r\nimport (\r\n\t\"errors\"\r\n\t\"math\"\r\n\t\"time\"\r\n)\r\n\r\ntype CalcSunStruct struct {\r\n\tLatitude  float64\r\n\tLongitude float64\r\n\tUtcOffset float64\r\n\tDate      time.Time\r\n}\r\n\r\n// Calculate Sunrise & Sunset without MODS or JSON\r\n// Just call the 'general' GetSunriseSunset function and return the results\r\nfunc (p *CalcSunStruct) GetSunriseSunset() (time.Time, time.Time, error) {\r\n\treturn GetSunriseSunset(p.Latitude, p.Longitude, p.UtcOffset, p.Date)\r\n}\r\n\r\n// Convert radians to degrees\r\nfunc rad2deg(radians float64) float64 {\r\n\treturn radians * (180.0 / math.Pi)\r\n}\r\n\r\n// Convert degrees to radians\r\nfunc deg2rad(degrees float64) float64 {\r\n\treturn degrees * (math.Pi / 180.0)\r\n}\r\n\r\n// Creates a vector with the seconds normalized to the range 0~1.\r\n// seconds - The number of seconds will be normalized to 1\r\n// Return A vector with the seconds normalized to 0~1\r\nfunc createSecondsNormalized(seconds int) (vector []float64) {\r\n\tfor index := 0; index < seconds; index++ {\r\n\t\ttemp := float64(index) / float64(seconds-1)\r\n\t\tvector = append(vector, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate Julian Day based on the formula: nDays+2415018.5+secondsNorm-UTCoff/24\r\n// numDays - The number of days calculated in the calculate function\r\n// secondsNorm - Seconds normalized calculated by the createSecondsNormalized function\r\n// utcOffset - UTC offset defined by the user\r\n// Return Julian day slice\r\nfunc calcJulianDay(numDays int64, secondsNorm []float64, utcOffset float64) (julianDay []float64) {\r\n\tfor index := 0; index < len(secondsNorm); index++ {\r\n\t\ttemp := float64(numDays) + 2415018.5 + secondsNorm[index] - utcOffset/24.0\r\n\t\tjulianDay = append(julianDay, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Julian Century based on the formula: (julianDay - 2451545.0) / 36525.0\r\n// julianDay - Julian day vector calculated by the calcJulianDay function\r\n// Return Julian century slice\r\nfunc calcJulianCentury(julianDay []float64) (julianCentury []float64) {\r\n\tfor index := 0; index < len(julianDay); index++ {\r\n\t\ttemp := (julianDay[index] - 2451545.0) / 36525.0\r\n\t\tjulianCentury = append(julianCentury, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Geom Mean Long Sun in degrees based on the formula: 280.46646 + julianCentury * (36000.76983 + julianCentury * 0.0003032)\r\n// julianCentury - Julian century calculated by the calcJulianCentury function\r\n// Return The Geom Mean Long Sun slice\r\nfunc calcGeomMeanLongSun(julianCentury []float64) (geomMeanLongSun []float64) {\r\n\tfor index := 0; index < len(julianCentury); index++ {\r\n\t\ta := 280.46646 + julianCentury[index]*(36000.76983+julianCentury[index]*0.0003032)\r\n\t\ttemp := math.Mod(a, 360.0)\r\n\t\tgeomMeanLongSun = append(geomMeanLongSun, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Geom Mean Anom Sun in degrees based on the formula: 357.52911 + julianCentury * (35999.05029 - 0.0001537 * julianCentury)\r\n// julianCentury - Julian century calculated by the calcJulianCentury function\r\n// Return The Geom Mean Anom Sun slice\r\nfunc calcGeomMeanAnomSun(julianCentury []float64) (geomMeanAnomSun []float64) {\r\n\tfor index := 0; index < len(julianCentury); index++ {\r\n\t\ttemp := 357.52911 + julianCentury[index]*(35999.05029-0.0001537*julianCentury[index])\r\n\t\tgeomMeanAnomSun = append(geomMeanAnomSun, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Eccent Earth Orbit based on the formula: 0.016708634 - julianCentury * (0.000042037 + 0.0000001267 * julianCentury)\r\n// julianCentury - Julian century calculated by the calcJulianCentury function\r\n// Return The Eccent Earth Orbit slice\r\nfunc calcEccentEarthOrbit(julianCentury []float64) (eccentEarthOrbit []float64) {\r\n\tfor index := 0; index < len(julianCentury); index++ {\r\n\t\ttemp := 0.016708634 - julianCentury[index]*(0.000042037+0.0000001267*julianCentury[index])\r\n\t\teccentEarthOrbit = append(eccentEarthOrbit, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Sun Eq Ctr based on the formula: sin(deg2rad(geomMeanAnomSun))*(1.914602-julianCentury*(0.004817+0.000014*julianCentury))+sin(deg2rad(2*geomMeanAnomSun))*(0.019993-0.000101*julianCentury)+sin(deg2rad(3*geomMeanAnomSun))*0.000289;\r\n// julianCentury - Julian century calculated by the calcJulianCentury function\r\n// geomMeanAnomSun - Geom Mean Anom Sun calculated by the calcGeomMeanAnomSun function\r\n// Return The Sun Eq Ctr slice\r\nfunc calcSunEqCtr(julianCentury []float64, geomMeanAnomSun []float64) (sunEqCtr []float64) {\r\n\tif len(julianCentury) != len(geomMeanAnomSun) {\r\n\t\treturn\r\n\t}\r\n\r\n\tfor index := 0; index < len(julianCentury); index++ {\r\n\t\ttemp := math.Sin(deg2rad(geomMeanAnomSun[index]))*(1.914602-julianCentury[index]*(0.004817+0.000014*julianCentury[index])) + math.Sin(deg2rad(2*geomMeanAnomSun[index]))*(0.019993-0.000101*julianCentury[index]) + math.Sin(deg2rad(3*geomMeanAnomSun[index]))*0.000289\r\n\t\tsunEqCtr = append(sunEqCtr, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Sun True Long in degrees based on the formula: sunEqCtr + geomMeanLongSun\r\n// sunEqCtr - Sun Eq Ctr calculated by the calcSunEqCtr function\r\n// geomMeanLongSun - Geom Mean Long Sun calculated by the calcGeomMeanLongSun function\r\n// Return The Sun True Long slice\r\nfunc calcSunTrueLong(sunEqCtr []float64, geomMeanLongSun []float64) (sunTrueLong []float64) {\r\n\tif len(sunEqCtr) != len(geomMeanLongSun) {\r\n\t\treturn\r\n\t}\r\n\r\n\tfor index := 0; index < len(sunEqCtr); index++ {\r\n\t\ttemp := sunEqCtr[index] + geomMeanLongSun[index]\r\n\t\tsunTrueLong = append(sunTrueLong, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Sun App Long in degrees based on the formula: sunTrueLong-0.00569-0.00478*sin(deg2rad(125.04-1934.136*julianCentury))\r\n// sunTrueLong - Sun True Long calculated by the calcSunTrueLong function\r\n// julianCentury - Julian century calculated by the calcJulianCentury function\r\n// Return The Sun App Long slice\r\nfunc calcSunAppLong(sunTrueLong []float64, julianCentury []float64) (sunAppLong []float64) {\r\n\tif len(sunTrueLong) != len(julianCentury) {\r\n\t\treturn\r\n\t}\r\n\r\n\tfor index := 0; index < len(sunTrueLong); index++ {\r\n\t\ttemp := sunTrueLong[index] - 0.00569 - 0.00478*math.Sin(deg2rad(125.04-1934.136*julianCentury[index]))\r\n\t\tsunAppLong = append(sunAppLong, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Mean Obliq Ecliptic in degrees based on the formula: 23+(26+((21.448-julianCentury*(46.815+julianCentury*(0.00059-julianCentury*0.001813))))/60)/60\r\n// julianCentury - Julian century calculated by the calcJulianCentury function\r\n// Return the Mean Obliq Ecliptic slice\r\nfunc calcMeanObliqEcliptic(julianCentury []float64) (meanObliqEcliptic []float64) {\r\n\tfor index := 0; index < len(julianCentury); index++ {\r\n\t\ttemp := 23.0 + (26.0+(21.448-julianCentury[index]*(46.815+julianCentury[index]*(0.00059-julianCentury[index]*0.001813)))/60.0)/60.0\r\n\t\tmeanObliqEcliptic = append(meanObliqEcliptic, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Obliq Corr in degrees based on the formula: meanObliqEcliptic+0.00256*cos(deg2rad(125.04-1934.136*julianCentury))\r\n// meanObliqEcliptic - Mean Obliq Ecliptic calculated by the calcMeanObliqEcliptic function\r\n// julianCentury - Julian century calculated by the calcJulianCentury function\r\n// Return the Obliq Corr slice\r\nfunc calcObliqCorr(meanObliqEcliptic []float64, julianCentury []float64) (obliqCorr []float64) {\r\n\tif len(meanObliqEcliptic) != len(julianCentury) {\r\n\t\treturn\r\n\t}\r\n\r\n\tfor index := 0; index < len(julianCentury); index++ {\r\n\t\ttemp := meanObliqEcliptic[index] + 0.00256*math.Cos(deg2rad(125.04-1934.136*julianCentury[index]))\r\n\t\tobliqCorr = append(obliqCorr, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Sun Declination in degrees based on the formula: rad2deg(asin(sin(deg2rad(obliqCorr))*sin(deg2rad(sunAppLong))))\r\n// obliqCorr - Obliq Corr calculated by the calcObliqCorr function\r\n// sunAppLong - Sun App Long calculated by the calcSunAppLong function\r\n// Return the sun declination slice\r\nfunc calcSunDeclination(obliqCorr []float64, sunAppLong []float64) (sunDeclination []float64) {\r\n\tif len(obliqCorr) != len(sunAppLong) {\r\n\t\treturn\r\n\t}\r\n\r\n\tfor index := 0; index < len(obliqCorr); index++ {\r\n\t\ttemp := rad2deg(math.Asin(math.Sin(deg2rad(obliqCorr[index])) * math.Sin(deg2rad(sunAppLong[index]))))\r\n\t\tsunDeclination = append(sunDeclination, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the equation of time (minutes) based on the formula:\r\n// 4*rad2deg(multiFactor*sin(2*deg2rad(geomMeanLongSun))-2*eccentEarthOrbit*sin(deg2rad(geomMeanAnomSun))+4*eccentEarthOrbit*multiFactor*sin(deg2rad(geomMeanAnomSun))*cos(2*deg2rad(geomMeanLongSun))-0.5*multiFactor*multiFactor*sin(4*deg2rad(geomMeanLongSun))-1.25*eccentEarthOrbit*eccentEarthOrbit*sin(2*deg2rad(geomMeanAnomSun)))\r\n// multiFactor - The Multi Factor vector calculated in the calculate function\r\n// geomMeanLongSun - The Geom Mean Long Sun vector calculated by the calcGeomMeanLongSun function\r\n// eccentEarthOrbit - The Eccent Earth vector calculated by the calcEccentEarthOrbit function\r\n// geomMeanAnomSun - The Geom Mean Anom Sun vector calculated by the calcGeomMeanAnomSun function\r\n// Return the equation of time slice\r\nfunc calcEquationOfTime(multiFactor []float64, geomMeanLongSun []float64, eccentEarthOrbit []float64, geomMeanAnomSun []float64) (equationOfTime []float64) {\r\n\r\n\tif len(multiFactor) != len(geomMeanLongSun) ||\r\n\t\tlen(multiFactor) != len(eccentEarthOrbit) ||\r\n\t\tlen(multiFactor) != len(geomMeanAnomSun) {\r\n\t\treturn\r\n\t}\r\n\r\n\tfor index := 0; index < len(multiFactor); index++ {\r\n\t\ta := multiFactor[index] * math.Sin(2.0*deg2rad(geomMeanLongSun[index]))\r\n\t\tb := 2.0 * eccentEarthOrbit[index] * math.Sin(deg2rad(geomMeanAnomSun[index]))\r\n\t\tc := 4.0 * eccentEarthOrbit[index] * multiFactor[index] * math.Sin(deg2rad(geomMeanAnomSun[index]))\r\n\t\td := math.Cos(2.0 * deg2rad(geomMeanLongSun[index]))\r\n\t\te := 0.5 * multiFactor[index] * multiFactor[index] * math.Sin(4.0*deg2rad(geomMeanLongSun[index]))\r\n\t\tf := 1.25 * eccentEarthOrbit[index] * eccentEarthOrbit[index] * math.Sin(2.0*deg2rad(geomMeanAnomSun[index]))\r\n\t\ttemp := 4.0 * rad2deg(a-b+c*d-e-f)\r\n\t\tequationOfTime = append(equationOfTime, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the HaSunrise in degrees based on the formula: rad2deg(acos(cos(deg2rad(90.833))/(cos(deg2rad(latitude))*cos(deg2rad(sunDeclination)))-tan(deg2rad(latitude))*tan(deg2rad(sunDeclination))))\r\n// latitude - The latitude defined by the user\r\n// sunDeclination - The Sun Declination calculated by the calcSunDeclination function\r\n// Return the HaSunrise slice\r\nfunc calcHaSunrise(latitude float64, sunDeclination []float64) (haSunrise []float64) {\r\n\tfor index := 0; index < len(sunDeclination); index++ {\r\n\t\ttemp := rad2deg(math.Acos(math.Cos(deg2rad(90.833))/(math.Cos(deg2rad(latitude))*math.Cos(deg2rad(sunDeclination[index]))) - math.Tan(deg2rad(latitude))*math.Tan(deg2rad(sunDeclination[index]))))\r\n\t\thaSunrise = append(haSunrise, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Calculate the Solar Noon based on the formula: (720 - 4 * longitude - equationOfTime + utcOffset * 60) * 60\r\n// longitude - The longitude is defined by the user\r\n// equationOfTime - The Equation of Time slice is calculated by the calcEquationOfTime function\r\n// utcOffset - The UTC offset is defined by the user\r\n// Return the Solar Noon slice\r\nfunc calcSolarNoon(longitude float64, equationOfTime []float64, utcOffset float64) (solarNoon []float64) {\r\n\tfor index := 0; index < len(equationOfTime); index++ {\r\n\t\ttemp := (720.0 - 4.0*longitude - equationOfTime[index] + utcOffset*60.0) * 60.0\r\n\t\tsolarNoon = append(solarNoon, temp)\r\n\t}\r\n\treturn\r\n}\r\n\r\n// Check if the latitude is valid. Range: -90 - 90\r\nfunc checkLatitude(latitude float64) bool {\r\n\tif latitude < -90.0 || latitude > 90.0 {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\n// Check if the longitude is valid. Range: -180 - 180\r\nfunc checkLongitude(longitude float64) bool {\r\n\tif longitude < -180.0 || longitude > 180.0 {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\n// Check if the UTC offset is valid. Range: -12 - 14\r\nfunc checkUtcOffset(utcOffset float64) bool {\r\n\tif utcOffset < -12.0 || utcOffset > 14.0 {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\n// Check if the date is valid.\r\nfunc checkDate(date time.Time) bool {\r\n\tminDate := time.Date(1900, 1, 1, 0, 0, 0, 0, time.UTC)\r\n\tmaxDate := time.Date(2200, 1, 1, 0, 0, 0, 0, time.UTC)\r\n\tif date.Before(minDate) || date.After(maxDate) {\r\n\t\treturn false\r\n\t}\r\n\treturn true\r\n}\r\n\r\n// Compute the number of days between two dates\r\nfunc diffDays(date1, date2 time.Time) int64 {\r\n\treturn int64(date2.Sub(date1) / (24 * time.Hour))\r\n}\r\n\r\n// Find the index of the minimum value\r\nfunc minIndex(slice []float64) int {\r\n\tif len(slice) == 0 {\r\n\t\treturn -1\r\n\t}\r\n\tmin := slice[0]\r\n\tminIndex := 0\r\n\tfor index := 0; index < len(slice); index++ {\r\n\t\tif slice[index] < min {\r\n\t\t\tmin = slice[index]\r\n\t\t\tminIndex = index\r\n\t\t}\r\n\t}\r\n\treturn minIndex\r\n}\r\n\r\n// Convert each value to the absolute value\r\nfunc abs(slice []float64) []float64 {\r\n\tvar newSlice []float64\r\n\tfor _, value := range slice {\r\n\t\tif value < 0.0 {\r\n\t\t\tvalue = math.Abs(value)\r\n\t\t}\r\n\t\tnewSlice = append(newSlice, value)\r\n\t}\r\n\treturn newSlice\r\n}\r\n\r\nfunc round(value float64) int {\r\n\tif value < 0 {\r\n\t\treturn int(value - 0.5)\r\n\t}\r\n\treturn int(value + 0.5)\r\n}\r\n\r\n// GetSunriseSunset function is responsible for calculate the apparent Sunrise and Sunset times.\r\n// If some parameter is wrong it will return an error.\r\nfunc GetSunriseSunset(latitude float64, longitude float64, utcOffset float64, date time.Time) (sunrise time.Time, sunset time.Time, err error) {\r\n\t// Check latitude\r\n\tif !checkLatitude(latitude) {\r\n\t\terr = errors.New(\"invalid latitude\")\r\n\t\treturn\r\n\t}\r\n\t// Check longitude\r\n\tif !checkLongitude(longitude) {\r\n\t\terr = errors.New(\"invalid longitude\")\r\n\t\treturn\r\n\t}\r\n\t// Check UTC offset\r\n\tif !checkUtcOffset(utcOffset) {\r\n\t\terr = errors.New(\"invalid UTC offset\")\r\n\t\treturn\r\n\t}\r\n\t// Check date\r\n\tif !checkDate(date) {\r\n\t\terr = errors.New(\"invalid date\")\r\n\t\treturn\r\n\t}\r\n\r\n\t// The number of days since 30/12/1899\r\n\tsince := time.Date(1899, 12, 30, 0, 0, 0, 0, time.UTC)\r\n\tnumDays := diffDays(since, date)\r\n\r\n\t// Seconds of a full day 86400\r\n\tseconds := 24 * 60 * 60\r\n\r\n\t// Creates a vector that represents each second in the range 0~1\r\n\tsecondsNorm := createSecondsNormalized(seconds)\r\n\r\n\t// Calculate Julian Day\r\n\tjulianDay := calcJulianDay(numDays, secondsNorm, utcOffset)\r\n\r\n\t// Calculate Julian Century\r\n\tjulianCentury := calcJulianCentury(julianDay)\r\n\r\n\t// Geom Mean Long Sun (deg)\r\n\tgeomMeanLongSun := calcGeomMeanLongSun(julianCentury)\r\n\r\n\t// Geom Mean Anom Sun (deg)\r\n\tgeomMeanAnomSun := calcGeomMeanAnomSun(julianCentury)\r\n\r\n\t// Eccent Earth Orbit\r\n\teccentEarthOrbit := calcEccentEarthOrbit(julianCentury)\r\n\r\n\t// Sun Eq of Ctr\r\n\tsunEqCtr := calcSunEqCtr(julianCentury, geomMeanAnomSun)\r\n\r\n\t// Sun True Long (deg)\r\n\tsunTrueLong := calcSunTrueLong(sunEqCtr, geomMeanLongSun)\r\n\r\n\t// Sun App Long (deg)\r\n\tsunAppLong := calcSunAppLong(sunTrueLong, julianCentury)\r\n\r\n\t// Mean Obliq Ecliptic (deg)\r\n\tmeanObliqEcliptic := calcMeanObliqEcliptic(julianCentury)\r\n\r\n\t// Obliq Corr (deg)\r\n\tobliqCorr := calcObliqCorr(meanObliqEcliptic, julianCentury)\r\n\r\n\t// Sun Declin (deg)\r\n\tsunDeclination := calcSunDeclination(obliqCorr, sunAppLong)\r\n\r\n\t// var y\r\n\tvar multiFactor []float64\r\n\tfor index := 0; index < len(obliqCorr); index++ {\r\n\t\ttemp := math.Tan(deg2rad(obliqCorr[index]/2.0)) * math.Tan(deg2rad(obliqCorr[index]/2.0))\r\n\t\tmultiFactor = append(multiFactor, temp)\r\n\t}\r\n\r\n\t// Eq of Time (minutes)\r\n\tequationOfTime := calcEquationOfTime(multiFactor, geomMeanLongSun, eccentEarthOrbit, geomMeanAnomSun)\r\n\r\n\t// HA Sunrise (deg)\r\n\thaSunrise := calcHaSunrise(latitude, sunDeclination)\r\n\r\n\t// Solar Noon (LST)\r\n\tsolarNoon := calcSolarNoon(longitude, equationOfTime, utcOffset)\r\n\r\n\t// Sunrise and Sunset Times (LST)\r\n\tvar tempSunrise []float64\r\n\tvar tempSunset []float64\r\n\r\n\tfor index := 0; index < len(solarNoon); index++ {\r\n\t\ttempSunrise = append(tempSunrise, (solarNoon[index] - float64(round(haSunrise[index]*4.0*60.0)) - float64(seconds)*secondsNorm[index]))\r\n\t\ttempSunset = append(tempSunset, (solarNoon[index] + float64(round(haSunrise[index]*4.0*60.0)) - float64(seconds)*secondsNorm[index]))\r\n\t}\r\n\r\n\t// Get the sunrise and sunset in seconds\r\n\tsunriseSeconds := minIndex(abs(tempSunrise))\r\n\tsunsetSeconds := minIndex(abs(tempSunset))\r\n\r\n\t// Convert the seconds to time\r\n\tsunrise = time.Date(date.Year(), date.Month(), date.Day(), 0, 0, sunriseSeconds, 0, date.Location())\r\n\tsunset = time.Date(date.Year(), date.Month(), date.Day(), 0, 0, sunsetSeconds, 0, date.Location())\r\n\r\n\treturn\r\n}\r\n","data":"GetSunriseSunset in Golang providing latitude, longitude, offset, now time.Now()"}
{"id":614,"key":"package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"strconv\"\r\n\t\"unicode\"\r\n)\r\n\r\nfunc containsNumbersOrDot(s string) bool {\r\n\tfor _, char := range s {\r\n\t\tif unicode.IsDigit(char) || char == '.' {\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\treturn false\r\n}\r\n\r\nfunc StringToFloat64(inputString string) float64 {\r\n\tvar value float64\r\n\tif containsNumbersOrDot(inputString) {\r\n\t\tvalue, err := strconv.ParseFloat(inputString, 64)\r\n\t\tif err != nil {\r\n\t\t\tfmt.Printf(\"Error converting string to float64: %v\\n\", err)\r\n\t\t} else {\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\tfmt.Println(\"input is not a valid number or float\")\r\n\t}\r\n\treturn value\r\n}\r\n\r\nfunc main() {\r\n\tinput := \"-0.7\"\r\n\tresult := StringToFloat64(input)\r\n\tfmt.Printf(\"Result: %f\\n\", result)\r\n}\r\n","data":"Golang convert String to Float64 strconv.ParseFloat an check is it's a valid number"}
{"id":615,"key":"$ git config --global --unset http.sslVerify","data":"This command removes the http.sslVerify WARNING configuration option from the global Git"}
{"id":616,"key":"$ git config --global http.sslbackend schannel","data":"Git SSL certificate problem: unable to get local issuer certificate"}
{"id":617,"key":"$ fgrep -rl \"string\" *","data":"search files for the matching string and return only file names that may contain the string/pattern"}
{"id":618,"key":"import java.io.*;\r\nimport java.net.*;\r\n\r\npublic class JavaWebServer {\r\n    public static void main(String[] args) throws IOException {\r\n        ServerSocket server = new ServerSocket(8080); // Create a server socket on port 8080\r\n        while (true) {\r\n            Socket client = server.accept(); // Wait for an incoming connection and accept it\r\n            BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream())); // Read the request from the client\r\n            String requestLine = in.readLine(); // Get the first line of the HTTP request (e.g., GET /index.html HTTP/1.1)\r\n            if (requestLine != null && requestLine.startsWith(\"GET\")) { // Check that it's a valid HTTP GET request\r\n                String response = \"HTTP/1.0 200 OK\\r\\nContent-Type: text/plain; charset=UTF-8\\r\\n\\r\\nHello, World!\"; // Create the server response with status code and content type\r\n                client.getOutputStream().write(response.getBytes()); // Write the response to the client's output stream\r\n            } else {\r\n                client.close(); // Close the connection if it is not a valid HTTP GET request\r\n            }\r\n        }\r\n    }\r\n}","data":"Java webserver as simple example to help you started"}
{"id":619,"key":"\r\nimport java.io.*;\r\nimport java.net.*;\r\nimport java.util.*;\r\n\r\npublic class SimpleJavaWebServer {\r\n    public static void main(String[] args) throws IOException {\r\n        // Set port number to listen on (change it if needed)\r\n        int port = 8080;\r\n\r\n        try (ServerSocket serverSocket = new ServerSocket(port)) {\r\n            System.out.println(\"Simple Java Web Server started on port \" + port);\r\n\r\n            while (true) {\r\n                // Wait for a client connection request\r\n                Socket socket = serverSocket.accept();\r\n                System.out.println(\"Client connected: \" + socket);\r\n\r\n                try (InputStream is = socket.getInputStream()) {\r\n                    byte[] buffer = new byte[4096]; // Buffer size for reading client requests\r\n                    int bytesRead;\r\n\r\n                    StringBuilder requestStringBuilder = new StringBuilder();\r\n                    while ((bytesRead = is.read(buffer)) != -1) {\r\n                        String requestData = new String(buffer, 0, bytesRead);\r\n                        requestStringBuilder.append(requestData);\r\n                    }\r\n\r\n                    // Parse the HTTP request and extract relevant information (e.g., method, URL path)\r\n                    String[] parts = requestStringBuilder.toString().split(\" \");\r\n                    String method = parts[0];\r\n                    String urlPath = parts[1];\r\n\r\n                    if (\"GET\".equalsIgnoreCase(method)) { // Handle GET requests only in this example\r\n                        File fileToServe = new File(\"index.html\"); // Serve the \"index.html\" page by default\r\n\r\n                        try (FileInputStream fis = new FileInputStream(fileToServe);\r\n                             OutputStream os = socket.getOutputStream()) {\r\n                            byte[] responseBytes = Files.readAllBytes(fileToServe.toPath()); // Read the file content into a byte array\r\n                            String responseString = \"HTTP/1.0 200 OK\\r\\n\" +\r\n                                    \"Content-Type: text/html; charset=UTF-8\\r\\n\" +\r\n                                    \"\\r\\n\" + new String(responseBytes); // Create the HTTP response with file content\r\n\r\n                            os.write(responseString.getBytes()); // Send the response to client\r\n                        }\r\n                    } else {\r\n                        System.out.println(\"Unsupported request method: \" + method);\r\n                    }\r\n                } catch (IOException e) {\r\n                    System.err.println(\"Error processing client request: \" + e.getMessage());\r\n                } finally {\r\n                    socket.close(); // Close the connection when done\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            System.err.println(\"Failed to start server on port \" + port);\r\n        }\r\n    }\r\n}\r\n","data":"Simple Java webserver example to help you started"}
{"id":620,"key":"package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"math/rand\"\r\n\t\"time\"\r\n\r\n\t\"github.com/go-vgo/robotgo\"\r\n)\r\n\r\nfunc main() {\r\n\r\n\tsource := rand.NewSource(time.Now().UnixNano())\r\n\trandom := rand.New(source)\r\n\r\n\t// Define the interval in milliseconds\r\n\tinterval := 3000\r\n\tlowerBound := 10\r\n\tupperBound := 1024\r\n\r\n\tfmt.Println(\"Moving mouse periodically...\")\r\n\t// Infinite loop to continuously move the mouse\r\n\tfor {\r\n\t\t// Generate new position for the mouse\r\n\t\tx := random.Intn(upperBound-lowerBound+1) + lowerBound\r\n\t\ty := random.Intn(upperBound-lowerBound+1) + lowerBound\r\n\r\n\t\t// Print the new position\r\n\t\tfmt.Println(x, \"x\", y)\r\n\r\n\t\t// Move the mouse to a random position on the screen\r\n\t\trobotgo.MoveSmooth(x, y)\r\n\t\t// Pause for the defined interval\r\n\t\ttime.Sleep(time.Duration(interval) * time.Millisecond)\r\n\r\n\t}\r\n}","data":"Go MouseMover or moving your mouse periodically in Golang"}
{"id":621,"key":"PS > $ip = (Invoke-RestMethod -Uri 'https://api64.ipify.org?format=json').ip; Write-Host \"Your Public IP Address is $ip\"","data":"In PowerShell, you can use the `Invoke-WebRequest` cmdlet to retrieve your public IP address from various websites that provide this information."}
{"id":622,"key":"$ ip=$(curl -s https://api64.ipify.org | grep -oE '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | head -n 1) && echo \"Your Public IP Address is $ip\"","data":"In Linux, you can use the `curl` utility to retrieve your public IP address by sending a request to an external service that provides it"}
{"id":623,"key":"$ ip=$(curl -s checkip.dyndns.org | sed 's#.*Address: \\(.*\\)</b.*#\\1#') && echo \"Your Public IP Address is $ip\"","data":"In Linux, you can use the `curl` utility to retrieve your public IP address by sending a request to an external service that provides it"}
{"id":624,"key":"$ git diff","data":"Show changes between commits, commit and working tree, etc"}
{"id":625,"key":"$ git checkout -f && git clean -fd ","data":"Git Remove your uncommitted changes"}
{"id":626,"key":"$ pip install python-kasa","data":"Install TP-link kasa KP115 Smart WI-FI plug Energy Monitoring"}
{"id":627,"key":"$ kasa --host 192.168.1.115 --type plug emeter","data":"Query the TP-link kasa KP115 Smart WI-FI plug Energy Monitoring"}
{"id":628,"key":"#!/usr/bin/python3\r\nfrom flask import Flask, send_from_directory\r\n\r\napp = Flask(__name__, static_url_path='')\r\n\r\n@app.route('/')\r\ndef index():\r\n    return send_from_directory('static', 'index.html')\r\n\r\nif __name__ == \"__main__\":\r\n    app.run(host='0.0.0.0', port=8080)","data":"Python Flask webserver that serves with static `index.html` file example. "}
{"id":629,"key":"$ git log","data":"To show a history of changes to the branch, using git log"}
{"id":630,"key":"package extra\r\n\r\nimport (\r\n\t\"github.com/gin-gonic/gin\"\r\n)\r\n\r\nfunc Test() {\r\n\tgin.SetMode(gin.ReleaseMode)\r\n\tr := gin.Default()\r\n\r\n\tr.GET(\"/item/:category/:id/:action\", getDetails)\r\n\r\n\tr.Run(\"localhost:8080\")\r\n}\r\n\r\nfunc getDetails(c *gin.Context) {\r\n\tid := c.Param(\"id\")\r\n\tcategory := c.Param(\"category\")\r\n\taction := c.Param(\"action\")\r\n\tc.String(200, \"You've requested the item with id: %s in category: %s to perform action: %s\", id, category, action)\r\n}\r\n","data":"For Golang here's an example of parsing three values from the URL using Gin as the WebServer"}
{"id":631,"key":"package extra\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n\r\n\t\"github.com/gorilla/mux\"\r\n)\r\n\r\nfunc Test() {\r\n\tr := mux.NewRouter()\r\n\r\n\tr.HandleFunc(\"/item/{category}/{id}/{action}\", getDetails).Methods(\"GET\")\r\n\r\n\thttp.ListenAndServe(\":8080\", r)\r\n}\r\n\r\nfunc getDetails(w http.ResponseWriter, r *http.Request) {\r\n\tvars := mux.Vars(r)\r\n\tid := vars[\"id\"]\r\n\tcategory := vars[\"category\"]\r\n\taction := vars[\"action\"]\r\n\tfmt.Fprintf(w, \"You've requested the item with id: %s in category: %s to perform action: %s\\n\", id, category, action)\r\n}\r\n","data":"For Golang here's an example of parsing three values from the URL using Mux as the WebServer"}
{"id":632,"key":"package main\r\n\r\nimport (\r\n    \"github.com/gin-gonic/gin\"\r\n)\r\n\r\nfunc main() {\r\n    r := gin.Default()\r\n\r\n    // Serve HTML files from the \"views\" directory \r\n    r.LoadHTMLGlob(\"views/*\")\r\n\r\n    // Serve static files (like CSS, JavaScript, images) from the \"public\" directory\r\n    r.Static(\"/public\", \"./public\")\r\n\r\n    r.GET(\"/\", func(c *gin.Context) {\r\n        c.HTML(http.StatusOK, \"index.html\", nil)\r\n    })\r\n\r\n    r.Run() // listen and serve on 0.0.0.0:8080\r\n}","data":"In golang Gin can be used as a general-purpose webserver for serving both dynamic and static content"}
{"id":633,"key":"import (\r\n    \"github.com/gin-gonic/gin\"\r\n)\r\n\r\nfunc main() {\r\n    r := gin.Default()\r\n\r\n    // Serve HTML files from the \"views\" directory \r\n    r.LoadHTMLGlob(\"views/*\")\r\n\r\n    r.GET(\"/\", func(c *gin.Context) {\r\n        c.HTML(200, \"index.html\", gin.H{\r\n            \"title\": \"Home Page\",\r\n        })\r\n    })\r\n\r\n    r.GET(\"/help\", func(c *gin.Context) {\r\n        c.HTML(200, \"help.html\", gin.H{\r\n            \"title\": \"Help Page\",\r\n        })\r\n    })\r\n\r\n    r.Run() // listen and serve on 0.0.0.0:8080\r\n}","data":"In Go example simple Webserver with multiple pages"}
{"id":634,"key":"$ psql --version","data":"PostgreSQL command check psql server version"}
{"id":635,"key":"$ psql -p 5433 -h localhost -U ricardo","data":"Connect to PostgreSQL using psql client command "}
{"id":636,"key":"##instructions##\n# Add Docker's official GPG key\r\nsudo apt-get update\r\nsudo apt-get install ca-certificates curl\r\nsudo install -m 0755 -d /etc/apt/keyrings\r\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\r\nsudo chmod a+r /etc/apt/keyrings/docker.asc\r\n\r\n# Add the Docker repository to Apt sources\r\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \\\"$VERSION_CODENAME\\\") stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\r\n\r\n# Update package information\r\nsudo apt-get update\r\n\r\n# Install Docker Engine\r\nsudo apt-get install docker-ce docker-ce-cli containerd.io\r\n\r\n# Enable and start the Docker service:\r\nsudo systemctl enable --now docker","data":" Install Docker on Ubuntu for the aarch64 or x86_64 architecture. "}
{"id":637,"key":"##instructions##\r\n#!/usr/bin/env sh\r\ndocker run -d \\\r\n  --name PostgreSQL \\\r\n  -e POSTGRES_PASSWORD=secret\\\r\n  -p 5433:5433 \\\r\n  -v /ext4/docker/postgresql/DATA:/var/lib/postgresql/data \\\r\n  -v /ext4/docker/postgresql/PGDATA:/var/lib/postgresql \\\r\n  postgres","data":"simple script to create a docker image with persistent data volume and port"}
{"id":638,"key":"##instructions##\r\n# List Images: First, list all the Docker images on your system:\r\n$ docker image ls\r\n\r\n# Remove Specific Image: If you want to remove a specific image, use the docker rmi command followed by the image ID or tag. For example:\r\n$ docker rmi IMAGE_ID\r\n\r\n# Remove All Unused Images: To remove all unused (dangling) images, use the following command:\r\n$ docker image prune\r\n\r\n# Remove All Images (Including Stopped Containers): If you want to remove all images, including those associated with stopped containers, add the -a flag:\r\n$ docker image prune -a","data":"Remove docker images single, specific or all "}
{"id":639,"key":"##instructions##\r\n# List all containers in docker\r\n$ docker ps -a\r\n\r\n# Delete stopped container\r\n$ docker rm CONTAINER_NAME_OR_ID\r\n\r\n# forcefully remove a running container (even if it’s still running), you can use the -f flag:\r\n$ docker rm -f CONTAINER_NAME_OR_ID","data":"Docker identify and delete containers"}
{"id":640,"key":"$ sudo netstat -tuln | grep -i Plex","data":"You can check which port a service is running on in Linux by using the `netstat` command or the `ss` command. Here's how you can do it:"}
{"id":641,"key":"$ sudo ss -tuln | grep -i Plex","data":"You can check which port a service is running on in Linux by using the `netstat` command or the `ss` command. Here's how you can do it:"}
{"id":642,"key":"##instructions##\r\n# Set Up Docker’s Package Repository:\r\nsudo dnf -y install dnf-plugins-core\r\nsudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo\r\n\r\n#Install Docker Engine:\r\nsudo dnf install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\r\n\r\n# Start Docker:\r\nsudo systemctl start docker\r\n\r\n# Enable and start the Docker service:\r\nsudo systemctl enable --now docker","data":"Install Docker on Fedora for the aarch64 or x86_64 architecture. "}
{"id":643,"key":"##instructions##\r\n# Update Software Repositories\r\nsudo pacman -Syu\r\n\r\n#Install Docker:\r\nsudo pacman -S docker\r\n\r\n# Start Docker:\r\nsudo systemctl start docker\r\n\r\n# Enable and start the Docker service:\r\nsudo systemctl enable --now docker","data":"Install Docker on ArchLinux for the aarch64 or x86_64 architecture. "}
{"id":644,"key":"$ sudo blkid","data":"blkid will list block devices including USB devices attached to our host and provide device details like PARTUUID"}
{"id":645,"key":"##instructions##\r\n## How do enable the firewalld?\r\n$ sudo systemctl unmask --now firewalld\r\n$ sudo systemctl enable firewalld\r\n$ sudo systemctl start firewalld\r\n## verify that the firewalld started ##\r\nsudo firewall-cmd --state","data":"Linux How do enable the firewalld"}
{"id":646,"key":"##instructions## \r\n## How do disable the firewalld?\r\n$ sudo firewall-cmd --state\r\n$ sudo systemctl stop firewalld\r\n$ sudo systemctl disable firewalld\r\n$ sudo systemctl mask --now firewalld","data":"How do disable the firewalld"}
{"id":647,"key":"PS> code --list-extensions | ForEach-Object { [PSCustomObject]@{Extension=$_} } | Export-Csv -Path extensions.csv -NoTypeInformation","data":"PowerShell export a list of all extensions installed in VSC and save it in a CSV format"}
{"id":648,"key":"$ chmod 777 filename","data":"chmod 777: Everything for everyone"}
{"id":649,"key":"$ chmod 755 /path/to/file","data":"chmod 755: Only owner can write, read and execute for everyone"}
{"id":650,"key":"$ chmod 700 /path/to/file","data":"chmod 700: Everything for owner only"}
{"id":651,"key":"$ chmod 666 /path/to/file","data":"chmod 666: No one executes"}
{"id":652,"key":"$ chmod 644 /path/to/file","data":"chmod 644: Everyone can read, only owner can write"}
{"id":653,"key":"$ chmod 600 /path/to/file","data":"chmod 600: Owner can read and write, nothing else for anyone"}
{"id":654,"key":"$ docker inspect scmd:latest","data":"Run the docker inspect command followed by the name and tag of your image to list the full details of the docker container"}
{"id":655,"key":"$ docker exec -it container_id sh -c 'ls /app/'","data":"List the files in the /app/ directory of a running Docker container"}
{"id":656,"key":"$ docker container start [OPTIONS] CONTAINER [CONTAINER...]","data":"Start existing configured docker containers"}
{"id":657,"key":"PS> (Get-NetIPAddress | Where-Object {$_.AddressState -eq \"Preferred\" -and $_.ValidLifetime -lt \"24:00:00\"}).IPAddress","data":"Powershell get only the local IP address Using Get-NetIPAddress"}
{"id":658,"key":"PS> Get-NetIPAddress | Where-Object {$_.AddressState -eq \"Preferred\" -and $_.ValidLifetime -lt \"24:00:00\"}","data":"Powershell get the local IP address and details Using Get-NetIPAddress"}
{"id":659,"key":"$ sudo docker exec -it gitea sh -c 'ls /usr/bin/git'\r\n","data":"Docker check if file is inside docker container here container name gitea and file is git"}
{"id":660,"key":"$ sudo docker exec -it gitea sh -c 'git --version'","data":"Docker execute command inside the docker container here container name gitea and command is git"}
{"id":661,"key":"$ sudo docker exec -it gitea /bin/sh","data":"Docker open command line inside the container for any editing or viewing requirements."}
{"id":662,"key":"$ docker login --username=your-username --password=your-password && docker push gcclinux/scmd:aarch64\r\n","data":"Docker example to login and push a docker image to docker hub"}
{"id":663,"key":"PS> Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\r\n","data":"PowerShell as an Administrator disable WSL Linux Subsystem"}
{"id":664,"key":"##instructions##\r\n\r\n\r\n1. Update your existing list of packages:\r\n\r\n$ sudo apt-get update\r\n\r\n2. Install a few prerequisite packages which let `apt` use packages over HTTPS:\r\n\r\n$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common\r\n\r\n3. Add the GPG key for the official Docker repository to your system:\r\n\r\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\r\n\r\n4. Add the Docker repository to APT sources:\r\n\r\n$ sudo add-apt-repository \"deb [arch=arm64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\r\n\r\n5. Update the package database with the Docker packages from the newly added repo:\r\n\r\n$ sudo apt-get update\r\n\r\n6. Make sure you are about to install from the Docker repo instead of the default Ubuntu repo:\r\n\r\n$ apt-cache policy docker-ce\r\n\r\n7. Finally, install Docker:\r\n\r\n$ sudo apt-get install docker-ce\r\n\r\nDocker should now be installed, the daemon started, and the process enabled to start on boot. Check that it's running:\r\n\r\n$ sudo systemctl status docker\r\n\r\nThe output should be similar to this, showing that the service is active and running:\r\n\r\ndocker.service - Docker Application Container Engine\r\n   Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)\r\n   Active: active (running) since Thu 2021-04-22 22:15:39 UTC; 2min 55s ago\r\n     Docs: https://docs.docker.com\r\n Main PID: 2443 (dockerd)\r\n    Tasks: 8\r\n   Memory: 46.4M\r\n   CGroup: /system.slice/docker.service\r\n           └─2443 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\r\n\r\nYou can also verify that Docker is correctly installed and that you can download images and run them:\r\n\r\n$ sudo docker run hello-world\r\n\r\nThis command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.","data":"To install Docker on a headless Ubuntu system running on an ARM architecture, you can follow these steps"}
{"id":665,"key":"##instructions##\r\nEnabling root SSH login is generally not recommended due to security concerns. However, if you understand the risks and still want to enable it, you can follow these steps:\r\n\r\n1. Open the SSH daemon configuration file:\r\n\r\n$ sudo vim /etc/ssh/sshd_config\r\n\r\n2. Find the line in the file containing `#PermitRootLogin` and modify it to:\r\n\r\n$ PermitRootLogin yes\r\n\r\nIf the line doesn't exist, you can add it at the end of the file.\r\n\r\n3. Save and exit the file.\r\n\r\n4. Restart the SSH service to apply the changes:\r\n\r\n$ sudo systemctl restart ssh\r\n\r\nNow, the root user should be able to SSH into the host. Remember to use a strong password for the root user, as allowing SSH access for root can pose a significant security risk if not properly secured.","data":"Enabling root SSH login is generally not recommended due to security concerns."}
{"id":666,"key":"Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux","data":"PowerShell as an Administrator enable WSL Linux Subsystem used for docker"}
{"id":667,"key":"$ sudo docker update --restart=always container_name_or_id","data":"Docker container update the restart policy of a running Docker container using the `docker update` command."}
{"id":668,"key":"$ tar xC ${HOME}/ -f android-studio-2023.2.1.24-linux.tar","data":"Extract tar into a specific folder in this case home drive"}
{"id":669,"key":"##instructions##\r\ntouch README.md\r\ngit init\r\ngit checkout -b main\r\ngit add README.md\r\ngit commit -m \"first commit\"\r\ngit remote add origin https://gitea-server:3000/ricardo/wpowertop.git\r\ngit push -u origin main","data":"Gitea or Git Creating a new repository on the command line "}
{"id":670,"key":"$ sudo docker exec -u www-data DOCKER_IMAGE php occ config:system:get trusted_domains","data":"Docker check nextcloud trusted domains with occ"}
{"id":671,"key":"$ sudo -u www-data php occ config:system:get trusted_domains","data":"Check nextcloud trusted domains with occ"}
{"id":672,"key":"$ sudo docker exec -u www-data NEXTCLOUD php occ config:system:set trusted_domains 1 --value=yourdomain.com","data":"Docker add new trusted domain to Nextcloud and NEXTCLOUD is the container name"}
{"id":673,"key":"$ sudo -u www-data php occ config:system:set trusted_domains 1 --value=yourdomain.com","data":"Nextcloud add new trusted domain using occ"}
{"id":674,"key":"$ sudo -u www-data php occ user:lastseen ricardo","data":"To display the last login of users in Nextcloud using the `occ` command, you can use the `user:lastseen` command. This command will display the username and the last login date and time of all users. Please replace `php` and `occ` with the actual path if they are not in the system's PATH."}
{"id":675,"key":"$ sudo -u www-data php occ files:transfer-ownership <source-user> <destination-user>","data":"To transfer files from one user to another in Nextcloud using the `occ` command, you can use the `files:transfer-ownership` command."}
{"id":676,"key":"$ ip -json route get 8.8.8.8 | jq -r '.[].prefsrc'","data":"In Linux, you can use the `ip` utility to retrieve your public IP address by sending a request to an external service that provides it"}
{"id":677,"key":"PS> $shell = New-Object -ComObject \"Shell.Application\"; $shell.minimizeall();","data":"Powershell minimise current window through command line"}
{"id":678,"key":"$ sudo docker stop <container_name> && sudo docker pull dpage/pgadmin4:latest && sudo docker start<container_name>","data":"Docker refresh, update existing container in this case example how to upgrade pgadmin4 docker"}
{"id":679,"key":"$ docker-compose -f docker-compose.yml up --build -d","data":"Using docker-compose build container it requires Dockerfile & docker-compose.yml"}
{"id":680,"key":"$ sudo snap refresh <package>","data":"snap upgrade and downgrade Snap packages"}
{"id":681,"key":"PS> $i=2700; while ($i -gt 0){; write-host -nonewline \"Seconds $i until Shutdown\"; sleep 1;  $i--; cls }; $shell = New-Object -ComObject \"Shell.Application\"; $shell.minimizeall(); rundll32.exe powrprof.dll,SetSuspendState Shutdown","data":"PowerShell Shutdown windows after 45 minutes"}
{"id":682,"key":"PS> Start-Sleep -Seconds 2700; rundll32.exe powrprof.dll,SetSuspendState Shutdown","data":"PowerShell Shutdown windows after 45 minutes"}
{"id":683,"key":"$ sudo zypper update","data":"\"OpenSuse - SuseLinux update command\""}
{"id":684,"key":"$ systemctl --user start docker-desktop","data":"Ubuntu start docker desktop daemon"}
{"id":685,"key":"$ echo 'export EDITOR=/usr/bin/vi' >> $HOME/.bashrc && source $HOME/.bashrc","data":"Bash Linux default editor "}
{"id":686,"key":"$ git add . && git commit -m \"windows\" && git push -u -f origin main","data":"Single command git add & push remotely"}
{"id":687,"key":"$ inxi -c 0 -ACdGMNSz","data":"Linux command display all device hardware configured in a system"}
{"id":688,"key":"##instructions##\r\n-- Step 2: Retrieve the maximum value of the primary key column\r\nSELECT MAX(id) FROM api_weather;\r\n\r\n-- Assuming the result of the above query is 'X', proceed to step 3\r\n\r\n-- Step 3: Update the sequence\r\n-- Replace 'X' with the actual maximum value retrieved from the table\r\n-- Replace 'api_weather_id_seq' with the actual sequence name if it's different\r\nSELECT setval('api_weather_id_seq', (SELECT MAX(id) FROM api_weather), true);","data":"update the PostgreSQL unique key_sequence based on the last entry in the database, you can follow these steps:"}
{"id":689,"key":":s/^M$//","data":"Edit file and remove the ^M is a carriage-return character Press Ctrl+V Ctrl+M to insert that ^M"}
{"id":690,"key":":%s/^M//g","data":"Press Ctrl+V Ctrl+M to insert that ^M and remove the ^M is a carriage-return character global in the file"}
{"id":691,"key":"$ sudo mkfs.ext4 /dev/sdb1","data":"Format USB device must first unmount and then create ext4 filesystem"}
{"id":692,"key":"$ getent passwd gitea | grep -q '/usr/sbin/nologin' && echo \"nologin enabled\" || echo \"nologin not enabled\"","data":"To check if a user has [`nologin`]enabled as their shell, you can use the `getent` command to query the user database and then check the shell field."}
{"id":693,"key":"$ sudo docker run --rm -v docker_data:/data -v /server/docker/docker_data:/backup busybox sh -c \"cp -r /data/* /backup\"","data":"Docker using cp move the data from docker volume docker_data into system volume /server/docker/docker_data "}
{"id":694,"key":"$ sudo lsof | grep (your device name here)","data":"Which process is causing \"device busy\" when doing unmount?"}
{"id":695,"key":"$ sysbench --test=cpu run","data":"Benchmark Your Linux, Debian, Fedora, Suse System"}
{"id":696,"key":"$ sysbench --test=memory run","data":"Benchmark Your Linux, Debian, Fedora, Suse System"}
{"id":697,"key":"$ sysbench --test=fileio --file-test-mode=seqwr run","data":"Benchmark IO on your Linux, Debian, Fedora, Suse System"}
{"id":698,"key":"$ pip install python-kasa==0.6.2.1","data":"Install TP-link kasa KP115 Smart WI-FI with plug Energy Monitoring support"}
{"id":699,"key":"PS> Expand-Archive -LiteralPath \"C:\\path\\to\\archive.zip\" -DestinationPath \"C:\\path\\to\\destination\"","data":"PowerShell command to extract a zip file"}
{"id":700,"key":"PS> wsl --list","data":"Windows Subsystem Linux (WSL) list installed images"}
{"id":701,"key":"PS> wsl --list --running","data":"Windows Subsystem Linux (WSL) list running images"}
{"id":702,"key":"PS> wsl -d TEST","data":"Windows Subsystem Linux (WSL) start specific image called TEST"}
{"id":703,"key":"PS> wsl --export Ubuntu E:\\BACKUP\\WSL-Ubuntu-20241213.vhdx --vhd","data":"Windows Subsystem Linux (WSL) export / backup particular image"}
{"id":704,"key":"PS> wsl --import --vhd TEST E:\\LIVE\\  E:\\BACKUP\\WSL-Ubuntu-20241213.vhdx","data":"Windows Subsystem Linux (WSL) import/ restore image naming it TEST"}
{"id":705,"key":"PS> wsl --unregister TEST","data":"Windows Subsystem Linux (WSL) delete particular image called TEST"}
{"id":706,"key":"$ borg create --stats --progress --compression lz4 /media/samba/Fedora/Vorta::$(date +%F.%R) ~/Documents","data":"Borg backup run manual backup example "}
{"id":707,"key":"$ borg init -e repokey /media/samba/Fedora/Vorta","data":"Initialize a new backup repository (see borg init --help for encryption options)"}
{"id":708,"key":"$ borg list /media/samba/Fedora/Vorta/","data":"The command to list all backups in a Borg repository"}
{"id":709,"key":"$ borg extract /media/samba/Fedora/Vorta::2024-12-30.15:00 --list","data":"This will display a list of files and directories within the Borg Backup archive for restore - 2024-12-30.15:00 is the ARCHIVE_ID"}
{"id":710,"key":"$ cd /tmp/restore && borg extract /media/samba/Fedora/Vorta::2024-12-30.15:35","data":"Borg restore from archive by creating a restore folder: (mkdir /tmp/restore), then change into it and run the extract or the archive - 2024-12-30.15:35 = ARCHIVE_ID"}
{"id":711,"key":"$ borg mount /media/samba/Fedora/Vorta /tmp/backups/","data":"Mount the Archive: Use the borg mount command to mount the archive as a FUSE filesystem - borg mount BORG_REPO SOME_FOLDER"}
{"id":712,"key":"$ fusermount -u /tmp/restore","data":"Unmount the Archive: When you're done with borg archive or browsing backups, unmount the archive using the fusermount or umount command, depending on your system"}
{"id":713,"key":"$ borg delete /media/samba/Fedora/Vorta::2025-01-01.13:47","data":"This will delete a backup/archive within the Borg Backup database & content - 2025-01-01.13:47 is the ARCHIVE_ID"}
{"id":714,"key":"PS> Set-ExecutionPolicy RemoteSigned -Scope CurrentUser","data":"Fix PowerShell's execution policy restricted setting that runs scripts by default. To fix this, you'll need to change the execution policy like this"}
{"id":715,"key":"PS> dism /online /disable-feature /featurename:Microsoft-Hyper-V-All","data":"Powershell disable Hyper-V in windows 11"}
{"id":716,"key":"PS> Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Hypervisor","data":"Powershell disable Hyper-V from starting again after reboot in windows 11 "}
{"id":717,"key":"PS> Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All","data":"Powershell disable Hyper-V from starting again after reboot in windows 11"}
{"id":718,"key":"PS> Set-Alias -Name menu -Value \"D:\\Programming\\Batch\\menu.ps1\"","data":"PowersShell example set up alias \"menu\" to a script alternatively run notepad $PROFILE to setup alias"}
{"id":719,"key":"$ echo $XDG_CURRENT_DESKTOP","data":"Linux Check which desktop environment you are using"}
{"id":720,"key":"$ sudo apt install screenfetch","data":"Ubuntu Linux command to install a package called screenfetch"}
{"id":721,"key":" $ sudo pacman -Sy screenfetch --noconfirm","data":"EndeavourOS ArchlLinux command to install a package called screenfetch"}
{"id":722,"key":"$ dpkg -S /usr/bin/lite-desktop","data":"Find Which Package a File Belongs to in Debian/Ubuntu"}
{"id":723,"key":"$  sudo docker logs NEXTCLOUD","data":"How to Check Docker Container Logs"}
{"id":724,"key":"$ sudo docker exec -it NEXTCLOUD sh -c '/etc/init.d/apache2 restart'","data":"Restart nextcloud apache2 inside docker without restarting the container"}
{"id":725,"key":"PS> Install-Module PSWindowsUpdate","data":"PowerShell Enable Get-WindowsUpdate - Part 1"}
{"id":726,"key":"PS> Import-Module PSWindowsUpdate","data":"PowerShell Enable Get-WindowsUpdate - Part 2"}
{"id":727,"key":"PS> Get-WindowsUpdate","data":"PowerShell List Windows 11 available updates "}
{"id":728,"key":"PS> Install-WindowsUpdate","data":"PowerShell Install Windows 11 available updates"}
{"id":729,"key":"PS> scoop install fastfetch","data":"Windows scoop command to install a package called fastfetch equivalent for windows as the Linux neofetch and screenfetch"}
